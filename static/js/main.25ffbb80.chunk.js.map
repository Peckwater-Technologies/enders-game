{"version":3,"sources":["shared/shooter_interfaces.ts","Objects/Shooter.jsx","Objects/Bullet.jsx","utils/random.ts","Objects/Tree.jsx","utils/colours.ts","Objects/Grid.jsx","Canvas.jsx","shared/dumb_bot.ts","shared/shooter_imp.ts","App.tsx","shared/gameLoop.ts","serviceWorker.js","index.js"],"names":["ObstacleShape","GameOptions","gameWidth","gameHeight","fps","playerRadius","playerMoveSpeed","playerTurnSpeed","sensorRadius","noSensors","bulletSpeed","bulletRadius","bulletDamage","bulletCooldown","treeRadius","shooter","config","Bullet","b","this","props","data","rotation","angle","x","y","ref","radius","fill","i","enemy","colour","id","gunWidth","Math","sqrt","gunLength","width","height","gunColour","handRadius","handColour","React","Component","bullet","randBetween","min","max","multiplier","random","floor","tree","Tree","rgb","hex","trees","base_x","base_y","push","key","join","rand","startsWith","slice","length","map","v","parseInt","value","number","letter","toString","repeat","opacity","trunkColour","Grid","freq","pixels","ceil","horizontals","verticals","grid","transparency","background","Canvas","checkSize","bind","updateState","defaults","surface","window","innerWidth","innerHeight","state","implement","obj","Array","isArray","every","arr","res","Object","entries","k","_trees","ShooterState","assign","getScale","scale","minX","minY","setState","addEventListener","removeEventListener","obstacles","x0","players","y0","x1","y1","PADDING","rangeX","abs","rangeY","scaleX","scaleY","isNaN","freqWidth","bullets","layer","getTrees","StampedeBot","isEnemyInFront","enemySensors","fireBullet","turnLeft","turnRight","moveForward","KEY_LEFT","KEY_RIGHT","KEY_MOVE","KEY_STOP","KEY_SHOOT","delta","ShooterGame","createState","seed","players_result","cooldown","health","generateTrees","actions","n","newBullets","newPlayers","player","action","sourceAgent","newPlayer","moveObject","damagePerPlayer","collides","detectCollision","newBullet","done","newState","isDone","reward","generateObservation","agentIdx","agent","sensorSpread","bulletSensors","sensorAngle","PI","halfsidevector","cos","sin","longsidevector","playerDetectionRectangle","rectangle","bulletDetectionRectangle","enemyDetected","bulletDetected","j","isInside","obstacleSensors","observationSize","getData","observation","actionSize","getAction","player_id","hypot","object","speed","radians","obstacle","stepx","stepy","shape","Circle","Square","size","point","AM","AB","AD","AMdotAB","dot","AB2","AMdotAD","AD2","shortvector","longvector","a","xs","ys","result","xn","yn","isColliding","App","event","keyCode","act","_","realPlayer","document","createRef","agent1","agent2","game","agents","renderer","setInterval","idx","obs","console","log","redeploy","render","gameLoop","current","className","style","backgroundColor","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25ffbb80.chunk.js","sourcesContent":["import {GameState, GameAction, GameObservation, Agent, Renderer, Game} from \"./interfaces\";\r\n\r\nexport const GameOptions = {\r\n\tgameWidth: 1920,\r\n\tgameHeight: 1080,\r\n\tfps: 30, // so a tick every 1000/30 = 33ms\r\n\r\n\tplayerRadius: 20,\r\n\tplayerMoveSpeed: 50, // pixels / second\r\n\tplayerTurnSpeed: 180, // degrees  / second\r\n\r\n\tsensorRadius: 300,\r\n\r\n\tnoSensors: 20,\r\n\r\n\tbulletSpeed: 500, // pixels / second\r\n\tbulletRadius: 2,\r\n\tbulletDamage: 0.5, // amount of player health removed (starting health is 1)\r\n\tbulletCooldown: 1, // time between bullets\r\n\r\n\ttreeRadius: 30, //\r\n}\r\n\r\nexport interface ShooterState extends GameState {\r\n\tplayers: Array < Player > ;\r\n\tbullets: Array < Bullet > ;\r\n\tobstacles: Array <Obstacle >;\r\n}\r\n\r\nexport interface Player {\r\n  x: number,\r\n  y: number,\r\n  angle: number,\r\n\tcooldown: number,\r\n\thealth: number,\r\n}\r\n\r\nexport interface Bullet {\r\n\tsourceAgent: number;\r\n\tx: number;\r\n\ty: number;\r\n\tangle: number;\r\n}\r\n\r\nexport interface Obstacle {\r\n\tx: number;\r\n\ty: number;\r\n\tshape: ObstacleShape;\r\n\tsize: number;\r\n}\r\n\r\nexport enum ObstacleShape {\r\n\tCircle,\r\n\tSquare,\r\n}\r\n\r\nexport interface ShooterObservation extends GameObservation {\r\n\tx: number;\r\n\ty: number;\r\n\tangle: number;\r\n\tcooldown: number; // seconds left\r\n\thealth: number;\r\n\r\n\t// Sensors are 0 or 1 (indicating presence)\r\n\tenemySensors: Array < number > ;\r\n\tbulletSensors: Array < number > ;\r\n\tobstacleSensors: Array < number > ;\r\n}\r\n\r\n\r\nexport interface ShooterAction extends GameAction {\r\n  fireBullet: boolean;\r\n  // If both are specified (or none) then don't turn\r\n  turnLeft: boolean;\r\n  turnRight: boolean;\r\n  moveForward: boolean;\r\n}\r\n","import React from 'react';\r\nimport {Ellipse, Circle, Rect, Group} from 'react-konva';\r\nimport {GameOptions} from '../shared/shooter_interfaces';\r\nimport config from '../config.json';\r\n\r\nconst {shooter} = config;\r\n\r\nexport default class Bullet extends React.Component {\r\n/*\r\n\tcomponentDidMount() {\r\n\t\tlet shape = this.refs.player;\r\n\t\tlet imageObj = new Image();\r\n\t\timageObj.onload = function() {\r\n\t\t\tshape.fillPatternImage(imageObj);\r\n\t\t\tshape.fillPatternScale({\r\n\t\t\t\tx: GameOptions.playerRadius / 600,\r\n\t\t\t\ty: GameOptions.playerRadius / 600,\r\n\t\t\t})\r\n\t\t};\r\n\t\timageObj.src = '/public/flags.png';\r\n\t}\r\n*/\r\n\trender() {\r\n\t\tlet b = this.props.data;\r\n\t\treturn (\t\t\t\r\n\t\t\t<Group\r\n\t\t\t\trotation={b.angle + 90}\r\n\t\t\t\tx={b.x}\r\n\t\t\t\ty={b.y}\r\n\t\t\t>\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tref='player'\r\n\t\t\t\t\tradius={GameOptions.playerRadius}\r\n\t\t\t\t\tfill={this.props.i ? shooter.enemy : shooter.colour}\r\n\t\t\t\t\trotation={b.angle}\r\n\t\t\t\t/>\t\t\r\n\t\t\t\t<Rect\r\n\t\t\t\t\tid='gun'\r\n\t\t\t\t\tx={-0.5 * shooter.gunWidth}\r\n\t\t\t\t\ty={-Math.sqrt(2) * GameOptions.playerRadius - shooter.gunLength}\r\n\t\t\t\t\twidth={shooter.gunWidth}\r\n\t\t\t\t\theight={shooter.gunLength}\r\n\t\t\t\t\tfill={shooter.gunColour}\r\n\t\t\t\t/>\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tid='left-hand'\r\n\t\t\t\t\t//x={-GameOptions.playerRadius / (Math.sqrt(2))}\r\n\t\t\t\t\t//y={-GameOptions.playerRadius / (Math.sqrt(2))}\r\n\t\t\t\t\ty={-GameOptions.playerRadius}\r\n\t\t\t\t\tradius={5}\r\n\t\t\t\t\tfill='white'\r\n\t\t\t\t\trotation={b.angle}\r\n\t\t\t\t/>\r\n\t\t\t\t<Ellipse\r\n\t\t\t\t\tid='right-hand'\r\n\t\t\t\t\twidth={shooter.handRadius * 2}\r\n\t\t\t\t\theight={shooter.handRadius * 2}\r\n\t\t\t\t\tx={shooter.gunWidth}\r\n\t\t\t\t\ty={-2 * GameOptions.playerRadius}\r\n\t\t\t\t\t//height={GameOptions.playerRadius}\r\n\t\t\t\t\t//x={Math.sqrt((GameOptions.playerRadius ** 2) / 8)}\r\n\t\t\t\t\t//y={-3 * Math.sqrt((GameOptions.playerRadius ** 2) / 8)}\r\n\t\t\t\t\t//rotation={-45}\r\n\t\t\t\t\tfill={shooter.handColour}\r\n\t\t\t\t/>\r\n\t\t\t</Group>\r\n\t\t)\r\n\t}\r\n}","import React from 'react';\r\nimport {Circle, Group} from 'react-konva';\r\n\r\nimport {GameOptions} from '../shared/shooter_interfaces';\r\nimport config from '../config.json';\r\nconst {bullet} = config;\r\n\r\nexport default class Bullet extends React.Component {\r\n\r\n\trender() {\r\n\t\tlet b = this.props.data;\r\n\t\treturn (\r\n\t\t\t<Group\r\n\t\t\t\trotation={b.angle}\r\n\t\t\t\tx={b.x}\r\n\t\t\t\ty={b.y}\r\n\t\t\t>\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tradius={GameOptions.bulletRadius}\r\n\t\t\t\t\tfill={bullet.colour}\r\n\t\t\t\t/>\r\n\t\t\t</Group>\r\n\t\t)\r\n\t}\r\n}","export function randBetween(min: number, max: number): number {\r\n\tlet multiplier = Math.random();\r\n\treturn Math.floor(multiplier * (max - min + 1) + min);\r\n}","import React from 'react';\r\nimport {Circle, Group} from 'react-konva';\r\n\r\nimport {randBetween} from '../utils/random';\r\nimport {parseHex, parseRGB} from '../utils/colours'\r\n\r\nimport {GameOptions} from '../shared/shooter_interfaces.ts';\r\nimport config from '../config.json';\r\nconst {tree} = config;\r\n\r\nexport default class Tree extends React.Component {\r\n\r\n\trender() {\r\n\t\tlet b = this.props;\r\n\t\tlet trees = [];\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\tlet base_x = i & 1;\r\n\t\t\tlet base_y = i & 2;\r\n\t\t\ttrees.push(\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tkey={['tree', b.x, b.y, i].join('.')}\r\n\t\t\t\t\tx={((base_x ? 1 : -1) * GameOptions.treeRadius) + randBetween(-20, 20, this.props.rand)}\r\n\t\t\t\t\ty={((base_y ? 1 : -1) * GameOptions.treeRadius) + randBetween(-20, 20, this.props.rand)}\r\n\t\t\t\t\tradius={randBetween(GameOptions.treeRadius * 2, GameOptions.treeRadius * 3, this.props.rand)}\r\n\t\t\t\t\tfill={parseHex(parseRGB(tree.colour).map(value => value += randBetween(-30, 30, this.props.rand)))}\r\n\t\t\t\t\topacity={0.6}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<Group\r\n\t\t\t\trotation={randBetween(0, 360, this.props.rand)}\r\n\t\t\t\tx={b.x}\r\n\t\t\t\ty={b.y}\r\n\t\t\t>\r\n\t\t\t\t{trees}\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tradius={GameOptions.treeRadius + 5}\r\n\t\t\t\t\tfill='black'\r\n\t\t\t\t\topacity={0.6}\r\n\t\t\t\t/>\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tkey={['tree', b.x, b.y, 'trunk'].join('.')}\r\n\t\t\t\t\tid={['tree', b.x, b.y, 'trunk'].join('.')}\r\n\t\t\t\t\tradius={GameOptions.treeRadius}\r\n\t\t\t\t\tfill={tree.trunkColour}\r\n\t\t\t\t\topacity={0.8}\r\n\t\t\t\t/>\t\t\t\r\n\t\t\t</Group>\r\n\t\t)\r\n\t}\r\n}","export function parseRGB(hex: string): Array<number> {\r\n\tif (hex.startsWith('#')) hex = hex.slice(1);\r\n\tif (hex.length !== 6) return [0, 0, 0];\r\n\tlet r = hex.slice(0, 2);\r\n\tlet g = hex.slice(2, 4);\r\n\tlet b = hex.slice(4, 6);\r\n\treturn [r, g, b].map(v => parseInt(v, 16));\r\n}\r\n\r\nexport function parseHex(rgb: Array<number>): string {\r\n\tlet hex = '#' + rgb.map((number: number) => {\r\n\t\tlet letter = number.toString(16);\r\n\t\treturn '0'.repeat(2 - letter.length) + letter;\r\n\t}).join('');\r\n\treturn hex;\r\n}","import React from 'react';\r\nimport {Rect, Group} from 'react-konva';\r\n\r\nimport config from '../config.json';\r\n\r\nexport default class Grid extends React.Component {\r\n\r\n\trender() {\r\n\t\tconst {height, width, freq} = this.props;\r\n\t\tlet pixels = Math.ceil(width / freq);\r\n\t\tlet horizontals = [];\r\n\t\tlet verticals = [];\r\n\t\tfor (let i = 0; i < freq; i++) {\r\n\t\t\thorizontals.push(<Rect\r\n\t\t\t\tkey={['grid', 'horizontal', i].join('.')}\r\n\t\t\t\tx={pixels * i}\r\n\t\t\t\twidth={2}\r\n\t\t\t\theight={height}\r\n\t\t\t\tfill='black'\r\n\t\t\t\topacity={config.grid.transparency}\r\n\t\t\t/>)\r\n\t\t}\r\n\t\tfor (let i = 0; i < Math.ceil(height / pixels); i++) {\r\n\t\t\tverticals.push(<Rect\r\n\t\t\t\tkey={['grid', 'vertical', i].join('.')}\r\n\t\t\t\ty={pixels * i}\r\n\t\t\t\theight={1}\r\n\t\t\t\twidth={width}\r\n\t\t\t\tfill='black'\r\n\t\t\t\topacity={config.grid.transparency}\r\n\t\t\t/>)\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<Group>\r\n\t\t\t\t{verticals}\r\n\t\t\t\t{horizontals}\r\n\t\t\t</Group>\r\n\t\t)\r\n\t}\r\n}","import React from 'react';\r\nimport { Stage, Layer, Rect, Text } from 'react-konva';\r\n\r\nimport Shooter from './Objects/Shooter';\r\nimport Bullet from './Objects/Bullet';\r\nimport Tree from './Objects/Tree';\r\nimport Grid from './Objects/Grid';\r\n\r\nimport {randBetween} from './utils/random';\r\n\r\nimport config from './config.json';\r\nimport defaults from './defaults.json';\r\n\r\nimport {GameOptions} from './shared/shooter_interfaces';\r\n\r\nconst {background} = config;\r\n\r\nexport default class Canvas extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.checkSize = this.checkSize.bind(this);\r\n\t\tthis.updateState = this.updateState.bind(this);\r\n\t\tdefaults.surface.width = window.innerWidth;\r\n\t\tdefaults.surface.height = window.innerHeight;\r\n\t\tthis.state = implement(defaults);\r\n\t\tthis.state.rand = Math.random();\r\n\t\t/*setInterval(() => this.updateState({\r\n\t\t\tplayers: implement(defaults.players),\r\n\t\t\tbullets: implement(defaults.bullets)\r\n\t\t}), 1000 / config.frameRate);*/\r\n\t}\r\n\r\n\tredeploy(props) {\r\n\t\tif (props) {\r\n\t\t\tif (this._trees) delete this._trees;\r\n\t\t}\r\n\t}\r\n\r\n\tupdateState(ShooterState) {\r\n\t\tlet state = Object.assign(this.state, ShooterState);\r\n\t\tlet [scale, minX, minY] = this.getScale(state);\r\n\t\tstate = Object.assign(state, { scale, minX, minY });\r\n\t\tthis.setState(state);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.checkSize();\r\n\t\twindow.addEventListener('resize', this.checkSize);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\twindow.removeEventListener('resize', this.checkSize);\r\n\t}\r\n\r\n\tcheckSize() {\r\n\t\tlet state = this.state;\r\n\t\tstate.surface.width = window.innerWidth;\r\n\t\tstate.surface.height = window.innerHeight;\r\n\t\tthis.setState(state);\r\n\t}\r\n\r\n\tgetTrees(obstacles = []) {\r\n\t\tif (this._trees && this._trees.length) return this._trees;\r\n\t\tlet trees = [];\r\n\t\tfor (let i = 0; i < obstacles.length; i++) {\r\n\t\t\ttrees.push(<Tree\r\n\t\t\t\tkey={['tree', i].join('.')}\r\n\t\t\t\t{...obstacles[i]}\r\n\t\t\t/>);\r\n\t\t}\r\n\t\treturn this._trees = trees;\r\n\t}\r\n\r\n\tgetScale(state) {\r\n\t\tlet x0 = state.players[0].x; let y0 = state.players[0].y;\r\n\t\tlet x1 = state.players[1].x; let y1 = state.players[1].y;\r\n\r\n\t\tconst PADDING = 50 + GameOptions.playerRadius;\r\n\t\tlet minX = Math.min(x0, x1) - PADDING;\r\n\t\tlet minY = Math.min(y0, y1) - PADDING;\r\n\t\tlet rangeX = Math.abs(x1 - x0) + 2 * PADDING\r\n\t\tlet rangeY = Math.abs(y1 - y0) + 2 * PADDING\r\n\r\n\t\tlet scaleX = window.innerWidth / rangeX;\r\n\t\tlet scaleY = window.innerHeight / rangeY;\r\n\t\tlet scale = Math.min(Math.min(scaleX, scaleY), 2);\r\n\t\tif (isNaN(scale)) scale = 1;\r\n\r\n\t\treturn [scale, minX - 10, minY - 10];\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <Stage {...this.state.surface}\r\n\t\t\tx={-this.state.minX * this.state.scale}\r\n\t\t\ty={-this.state.minY * this.state.scale}\r\n\t\t\tscale={{ x: this.state.scale, y: this.state.scale }}\r\n\t\t>\r\n\t\t\t<Layer id='background'>\t\t\t\t\r\n\t\t\t\t<Rect\r\n\t\t\t\t\twidth={GameOptions.gameWidth}\r\n\t\t\t\t\theight={GameOptions.gameHeight}\r\n\t\t\t\t\tfill={background.colour}\r\n\t\t\t\t/>\r\n\t\t\t</Layer>\r\n\t\t\t<Layer id='grid'>\t\t\t\t\r\n\t\t\t\t<Grid\r\n\t\t\t\t\twidth={GameOptions.gameWidth}\r\n\t\t\t\t\theight={GameOptions.gameHeight}\r\n\t\t\t\t\tfreq={config.grid.freqWidth}\r\n\t\t\t\t/>\r\n\t\t\t</Layer>\r\n\t\t\t<Layer id='bullets'>\r\n\t\t\t\t{this.state.bullets.map((b, i) => <Bullet\r\n\t\t\t\t\tkey = {['bullet', i].join('.')}\r\n\t\t\t\t\tdata={b}\r\n\t\t\t\t/>)}\r\n\t\t\t</Layer>\r\n\t\t\t<Layer id='players' {...this.state.layer}>\t\t\t\r\n\t\t\t\t{this.state.players.map((b, i) => <Shooter\r\n\t\t\t\t\tkey={['shooter', i].join('.')}\r\n\t\t\t\t\ti={i}\r\n\t\t\t\t\tdata={b}\r\n\t\t\t\t/>)}\r\n\t\t\t</Layer>\r\n\t\t\t<Layer id='trees'>\r\n\t\t\t\t{this.getTrees(this.state.obstacles)}\r\n\t\t\t</Layer>\r\n\t\t</Stage>\r\n\t}\r\n}\r\n\r\nfunction implement(obj) {\r\n\tif (Array.isArray(obj)) {\r\n\t\tif (!obj.every(value => typeof value === 'number')) {\r\n\t\t\tlet arr = [];\r\n\t\t\tfor (let value of obj) {\r\n\t\t\t\tif (typeof value !== 'object') arr.push(value);\r\n\t\t\t\telse arr.push(implement(value));\r\n\t\t\t}\r\n\t\t\treturn arr;\r\n\t\t}\r\n\t\telse return randBetween(obj[0], obj[1]);\r\n\t}\r\n\tlet res = {};\r\n\tfor (let [k, v] of Object.entries(obj)) {\r\n\t\tif (typeof v !== 'object') res[k] = v;\r\n\t\telse res[k] = implement(v);\r\n\t}\r\n\treturn res;\r\n}","import {Agent, } from \"./interfaces\";\r\nimport {ShooterObservation, ShooterAction, } from \"./shooter_interfaces\";\r\n\r\nexport class DumbAgent implements Agent<ShooterObservation, ShooterAction> {\r\n  act(state: ShooterObservation): ShooterAction {\r\n    return {\r\n      fireBullet: true,\r\n      turnLeft: false,\r\n      turnRight: false,\r\n      moveForward: true,\r\n    };\r\n  }\r\n}\r\n\r\nexport class StampedeBot implements Agent<ShooterObservation, ShooterAction> {\r\n  act(state: ShooterObservation): ShooterAction {\r\n    let isEnemyInFront = state.enemySensors[0] === 1;\r\n    return {\r\n      fireBullet: isEnemyInFront,\r\n      turnLeft: !isEnemyInFront,\r\n      turnRight: false,\r\n      moveForward: isEnemyInFront,\r\n    };\r\n  }\r\n}\r\n\r\nconst KEY_LEFT = 37;\r\nconst KEY_RIGHT = 39;\r\nconst KEY_MOVE = 38;\r\nconst KEY_STOP = 40;\r\nconst KEY_SHOOT = 32;\r\n\r\nexport function realPlayer(): [(event: KeyboardEvent) => void, (event: KeyboardEvent) => void, Agent<ShooterObservation, ShooterAction>] {\r\n\r\n  const action = {\r\n    turnLeft: false,\r\n    turnRight: false,\r\n    moveForward: false,\r\n    fireBullet: false\r\n  };\r\n\r\n\r\n  function keyDown(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case KEY_LEFT:\r\n        action.turnLeft = true;\r\n        break;\r\n      case KEY_RIGHT:\r\n        action.turnRight = true;\r\n        break;\r\n      case KEY_MOVE:\r\n        action.moveForward = true;\r\n\t\tbreak;\r\n\t  case KEY_STOP:\r\n\t\taction.moveForward = false;\r\n\t\tbreak;\r\n      case KEY_SHOOT:\r\n        action.fireBullet = true;\r\n        break;\r\n    }\r\n  }\r\n\r\n  function keyUp(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case KEY_LEFT:\r\n        action.turnLeft = false;\r\n        break;\r\n      case KEY_RIGHT:\r\n        action.turnRight = false;\r\n        break;\r\n\t\tcase KEY_MOVE:\r\n\t\t  action.moveForward = false;\r\n\t\t  break;\r\n\t\tcase KEY_SHOOT:\r\n\t\t  action.fireBullet = false;\r\n\t\t  break;\r\n    }\r\n\t}\r\n\r\n  return [keyUp, keyDown, { act: _ => action }];\r\n}\r\n\r\nexport class RealPlayer implements Agent<ShooterObservation, ShooterAction> {\r\n  private rotate_left: boolean;\r\n  private rotate_right: boolean;\r\n  private move: boolean;\r\n  private shoot: boolean;\r\n\r\n  constructor() {\r\n    this.rotate_left = false;\r\n    this.rotate_right = false;\r\n    this.move = true;\r\n    this.shoot = false;\r\n  }\r\n\r\n  keyDown(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case KEY_LEFT:\r\n        this.rotate_left = true;\r\n        break;\r\n      case KEY_RIGHT:\r\n        this.rotate_right = true;\r\n        break;\r\n      case KEY_MOVE:\r\n        this.move = true;\r\n        break;\r\n\t\tcase KEY_STOP:\r\n\t\t  this.move = false;\r\n\t\t  break;\r\n      case KEY_SHOOT:\r\n        this.shoot = true;\r\n        break;\r\n    }\r\n  }\r\n\r\n  keyUp(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case KEY_LEFT:\r\n        this.rotate_left = false;\r\n        break;\r\n      case KEY_RIGHT:\r\n        this.rotate_right = false;\r\n        break;\r\n\t\tcase KEY_MOVE:\r\n\t\t  this.move = false;\r\n\t\t  break;\r\n\t\tcase KEY_SHOOT:\r\n\t\t  this.shoot = false;\r\n\t\t  break;\r\n    }\r\n\t}\r\n\r\n  act(state: ShooterObservation): ShooterAction {\r\n    return {\r\n      fireBullet: this.shoot,\r\n      turnLeft: this.rotate_left,\r\n      turnRight: this.rotate_right,\r\n      moveForward: this.move,\r\n    };\r\n  }\r\n}\r\n","import { Game, StateUpdate } from \"./interfaces\"\r\nimport { ShooterAction, ShooterState, ShooterObservation, GameOptions, Player, Bullet, Obstacle, ObstacleShape, } from \"./shooter_interfaces\";\r\nimport { randBetween, } from \"../utils/random\";\r\n\r\nconst delta = 1 / GameOptions.fps;\r\n\r\nexport const ShooterGame: Game<ShooterState, ShooterAction, ShooterObservation> = {\r\n\r\n  createState(seed: number): ShooterState {\r\n\r\n    const players = [\r\n\t\t{\r\n\t\t\t\"x\": [200, 3800],\r\n\t\t\t\"y\": [100, 1900],\r\n\t\t\t\"angle\": [0, 360]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"x\": [200, 3800],\r\n\t\t\t\"y\": [100, 1900],\r\n\t\t\t\"angle\": [0, 360]\r\n\t\t}\r\n    ];\r\n\r\n    //it's possible to do something more intelligent here after adding obstacles\r\n    let player1 = {\r\n      x: randBetween(GameOptions.playerRadius, GameOptions.gameWidth - GameOptions.playerRadius),\r\n      y: randBetween(GameOptions.playerRadius, GameOptions.gameHeight - GameOptions.playerRadius),\r\n      angle: 45,\r\n      cooldown: 0,\r\n      health: 1,\r\n    };\r\n    let player2 = {\r\n\t\tx: randBetween(GameOptions.playerRadius, GameOptions.gameWidth - GameOptions.playerRadius),\r\n\t\ty: randBetween(GameOptions.playerRadius, GameOptions.gameHeight - GameOptions.playerRadius),\r\n      angle: 225,\r\n      cooldown: 0,\r\n      health: 1,\r\n    };\r\n\r\n    let players_result = [player1, player2];\r\n    return {\r\n      players: players_result,\r\n      bullets: [],\r\n      obstacles: generateTrees(players_result, Math.floor(GameOptions.gameWidth * GameOptions.gameHeight / 40000)),\r\n    };\r\n  },\r\n\r\n  updateState(state: ShooterState, actions: ShooterAction[]): StateUpdate<ShooterState> {\r\n    const n = state.players.length;\r\n\r\n    const newBullets = [];\r\n    const newPlayers = [];\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      const player = state.players[i];\r\n      const action = actions[i];\r\n\r\n      let cooldown = player.cooldown;\r\n      let angle = player.angle;\r\n\r\n      if (action.fireBullet && player.cooldown < 0.01) {\r\n        newBullets.push({sourceAgent: i, x: player.x, y: player.y, angle: player.angle});\r\n        cooldown = GameOptions.bulletCooldown;\r\n      } else {\r\n        cooldown = Math.max(0, cooldown - delta);\r\n      }\r\n\r\n      if (action.turnLeft) angle -= (GameOptions.playerTurnSpeed * delta) % 360;\r\n      if (action.turnRight) angle += (GameOptions.playerTurnSpeed * delta) % 360;\r\n\r\n      let newPlayer = {\r\n        ...player,\r\n        cooldown,\r\n        angle\r\n      };\r\n      if (action.moveForward) {\r\n        newPlayer = moveObject(newPlayer, GameOptions.playerMoveSpeed * delta, GameOptions.playerRadius, state.obstacles);\r\n      }\r\n\r\n      newPlayers.push(newPlayer);\r\n    }\r\n\r\n    const damagePerPlayer = Array(n).fill(0);\r\n\r\n    for (const bullet of state.bullets) {\r\n      let collides = false;\r\n      for (let i = 0; i < n; i++) {\r\n        const player = state.players[i];\r\n        if (detectCollision(player, bullet, i)) {\r\n          collides = true;\r\n          damagePerPlayer[i] += GameOptions.bulletDamage;\r\n          break;\r\n        }\r\n      }\r\n      if (!collides) {\r\n        let newBullet = moveObject(bullet, GameOptions.bulletSpeed * delta, 0, state.obstacles);\r\n        if (newBullet.x > 0 && newBullet.x < GameOptions.gameWidth && newBullet.y > 0 && newBullet.y < GameOptions.gameHeight){\r\n          newBullets.push(newBullet);\r\n        }\r\n      }\r\n    }\r\n\r\n    let done = false;\r\n    for (let i = 0; i < n; i++) {\r\n      newPlayers[i].health -= damagePerPlayer[i];\r\n      if (newPlayers[i].health < 0.01) {\r\n        done = true;\r\n      }\r\n    }\r\n\r\n    return {\r\n      newState: { ...state, players: newPlayers, bullets: newBullets },\r\n      isDone: done,\r\n      reward: damagePerPlayer.map(x => -x),\r\n    };\r\n  },\r\n\r\n  generateObservation(state: ShooterState, agentIdx: number): ShooterObservation {\r\n    let agent = state.players[agentIdx];\r\n    let x = agent.x;\r\n    let y = agent.y;\r\n    let angle = agent.angle;\r\n    let cooldown = agent.cooldown;\r\n\r\n    let sensorSpread = 360 / GameOptions.noSensors;\r\n\r\n    let enemySensors = [];\r\n    let bulletSensors = [];\r\n    for(let i = 0; i < GameOptions.noSensors; i++) {\r\n      let sensorAngle = (angle + i * sensorSpread) / 180 * Math.PI;\r\n      let halfsidevector: [number, number] = [Math.cos(sensorAngle + Math.PI / 2), Math.sin(sensorAngle + Math.PI / 2)];\r\n      let longsidevector: [number, number] = [Math.cos(sensorAngle), Math.sin(sensorAngle)];\r\n      let playerDetectionRectangle: Array<[number, number]> = rectangle(x, y, GameOptions.playerRadius, halfsidevector, longsidevector);\r\n      let bulletDetectionRectangle: Array<[number, number]> = rectangle(x, y, GameOptions.bulletRadius, halfsidevector, longsidevector);\r\n\r\n      let enemyDetected = 0;\r\n      let bulletDetected = 0;\r\n      let n = state.players.length;\r\n      for(let j = 0; j < n; j ++) {\r\n        if(j === agentIdx) {continue;}\r\n        if(isInside(playerDetectionRectangle, [state.players[j].x, state.players[j].y])){\r\n          enemyDetected = 1;\r\n          break;\r\n        }\r\n      }\r\n      for(var bullet of state.bullets) {\r\n        if(bullet.sourceAgent != agentIdx && isInside(bulletDetectionRectangle, [bullet.x, bullet.y])) {\r\n          bulletDetected = 1;\r\n          break;\r\n        }\r\n      }\r\n      enemySensors.push(enemyDetected);\r\n      bulletSensors.push(bulletDetected);\r\n    }\r\n    return {\r\n      x: x,\r\n      y: y,\r\n      angle: angle,\r\n      cooldown: cooldown, // seconds left\r\n      health: agent.health,\r\n\r\n      // Sensors are 0 or 1 (indicating presence)\r\n      enemySensors: enemySensors,\r\n      bulletSensors: bulletSensors,\r\n      obstacleSensors: [], //TODO\r\n    };\r\n  },\r\n\r\n  observationSize: 5 + 3 * GameOptions.noSensors,\r\n  getData(observation: ShooterObservation): number[] {\r\n    return [\r\n      observation.x,\r\n      observation.y,\r\n      observation.angle,\r\n      observation.cooldown,\r\n      observation.health,\r\n      ...observation.obstacleSensors,\r\n      ...observation.enemySensors,\r\n      ...observation.bulletSensors,\r\n    ];\r\n  },\r\n\r\n  actionSize: 4,\r\n  getAction(data: number[]): ShooterAction {\r\n    return {\r\n      fireBullet: data[0] > 0.5,\r\n      turnLeft: data[1] > 0.5,\r\n      turnRight: data[2] > 0.5,\r\n      moveForward: data[3] > 0.5,\r\n    }\r\n  }\r\n}\r\n\r\nfunction detectCollision(player: Player, bullet: Bullet, player_id: number) {\r\n  return Math.hypot(player.x - bullet.x, player.y - bullet.y, 2) < (GameOptions.playerRadius + GameOptions.bulletRadius)\r\n    && bullet.sourceAgent != player_id;\r\n}\r\n\r\nfunction moveObject<T extends { x: number, y: number, angle: number }>(object: T, speed: number, radius: number, obstacles: Array<Obstacle>): T {\r\n  let radians = object.angle / 180 * Math.PI;\r\n  let x = object.x + Math.cos(radians) * speed;\r\n  let y = object.y + Math.sin(radians) * speed;\r\n  if (x > GameOptions.gameWidth - radius) {\r\n    x = GameOptions.gameWidth - radius;\r\n  }\r\n  else if (x < radius) {\r\n    x = radius;\r\n  }\r\n  if (y > GameOptions.gameHeight - radius) {\r\n    y = GameOptions.gameHeight - radius;\r\n  }\r\n  else if (y < radius) {\r\n    y = radius;\r\n  }\r\n\r\n  for(let obstacle of obstacles) {\r\n    let stepx = 0.05 * (x - obstacle.x)\r\n    let stepy = 0.05 * (y - obstacle.y)\r\n    switch(obstacle.shape) {\r\n      case ObstacleShape.Circle:\r\n        while(radius + obstacle.size > Math.hypot(x - obstacle.x, y - obstacle.y) + 0.1){\r\n          x += stepx;\r\n          y += stepy;\r\n          if(radius < 1) {\r\n            x = 1000000;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      case ObstacleShape.Square:\r\n        //TODO it does the same what circle\r\n        while(radius + obstacle.size > Math.hypot(x - obstacle.x, y - obstacle.y) + 0.1){\r\n          x += stepx;\r\n          y += stepy;\r\n          if(radius < 1) {\r\n            x = 1000000;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  }\r\n  return {\r\n    ...object,\r\n    x: x,\r\n    y: y,\r\n  };\r\n}\r\n\r\n//https://math.stackexchange.com/questions/190111/how-to-check-if-a-point-is-inside-a-rectangle\r\nfunction isInside(rectangle: Array<[number, number]>, point: [number, number]) {\r\n  let AM = [point[0] - rectangle[0][0], point[1] - rectangle[0][1]];\r\n  let AB = [rectangle[1][0] - rectangle[0][0], rectangle[1][1] - rectangle[0][1]];\r\n  let AD = [rectangle[3][0] - rectangle[0][0], rectangle[3][1] - rectangle[0][1]];\r\n  let AMdotAB = dot(AM, AB);\r\n  let AB2 = dot(AB, AB);\r\n  let AMdotAD = dot(AM, AD);\r\n  let AD2 = dot(AD, AD);\r\n  return (0 < AMdotAB && AMdotAB < AB2 && 0 < AMdotAD && AMdotAD < AD2);\r\n}\r\n\r\nfunction rectangle(x: number, y: number, radius: number, shortvector: [number, number], longvector: [number, number]): Array<[number, number]> {\r\n  let halfsidevector = [shortvector[0] * radius, shortvector[1] * radius];\r\n  let longsidevector = [longvector[0] * (radius+GameOptions.sensorRadius), longvector[1] *(radius+GameOptions.sensorRadius)]\r\n  let a: [number, number] = [x + halfsidevector[0], y + halfsidevector[1]];\r\n  let b: [number, number] = [x - halfsidevector[0], y - halfsidevector[1]];\r\n  let c: [number, number] = [b[0] + longsidevector[0], b[1] + longsidevector[1]];\r\n  let d: [number, number] = [a[0] + longsidevector[0], a[1] + longsidevector[1]];\r\n  return [a, b, c, d];\r\n}\r\n\r\nfunction dot(xs: Array<number>, ys: Array<number>) {\r\n  let result = 0;\r\n  let xn = xs.length;\r\n  let yn = ys.length;\r\n  for(let i = 0; i < xn && i < yn; i++) {\r\n    result += xs[i] * ys[i];\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction generateTrees(players: Array<Player>, n: number): Array<Obstacle> {\r\n  let trees: Array<Obstacle> = [];\r\n  for(let i = 0; i < n; i++){\r\n    let x = randBetween(0, GameOptions.gameWidth);\r\n    let y = randBetween(0, GameOptions.gameHeight);\r\n    let size = GameOptions.treeRadius;\r\n    let isColliding = false;\r\n    for(let player of players) {\r\n      if(Math.hypot(x - player.x, y - player.y) < GameOptions.playerRadius + size - 0.1) {isColliding = true; break;}\r\n    }\r\n    if(!isColliding){\r\n      trees.push({\r\n        x: x,\r\n        y: y,\r\n        shape: ObstacleShape.Circle,\r\n        size: size,\r\n      });\r\n    }\r\n  }\r\n  return trees;\r\n}\r\n","import React from 'react';\r\nimport Canvas from './Canvas';\r\nimport './App.css';\r\nimport { DumbAgent, StampedeBot, realPlayer } from './shared/dumb_bot';\r\nimport { gameLoop } from './shared/gameLoop';\r\nimport { GameOptions } from './shared/shooter_interfaces';\r\nimport { ShooterGame } from './shared/shooter_imp';\r\n\r\nclass App extends React.Component {\r\n\r\n\t// private playerAgent = new RealPlayer()\r\n\tprivate player = realPlayer();\r\n\r\n\tcomponentDidMount(){\r\n\t\tdocument.addEventListener(\"keydown\", this.player[1]);\r\n\t\tdocument.addEventListener(\"keyup\", this.player[0]);\r\n\t}\r\n\t\r\n\tcomponentWillUnmount(){\r\n\t\tdocument.removeEventListener(\"keydown\", this.player[1]);\r\n\t\tdocument.removeEventListener(\"keyup\", this.player[0]);\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet ref = React.createRef<Canvas>();\r\n\r\n\t\t// let agent1 = this.playerAgent;\r\n\t\tlet agent1 = this.player[2];\r\n\t\tlet agent2 = new StampedeBot();\r\n\r\n\t\tgameLoop(ShooterGame, [agent1, agent2],\r\n\t\t\t{\r\n\t\t\t\tredeploy: state => ref.current && ref.current.redeploy(state),\r\n\t\t\t\trender: state => ref.current && ref.current.updateState(state)\r\n\t\t\t},\r\n\t\t\tGameOptions.fps\r\n\t\t)\r\n\r\n\t\treturn <div\r\n\t\t\t\tclassName=\"App\"\r\n\t\t\t\tid='container'\r\n\t\t\t\tref='container'\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tbackgroundColor: '#835C3B'\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t{ <Canvas ref={ref} /> }\r\n\t\t</div>;\r\n\t}\r\n}\r\n\r\nexport default App;","import { Game, GameState, GameAction, GameObservation, Renderer, Agent } from \"./interfaces\";\r\n\r\nexport function gameLoop<\r\n  State extends GameState, Action extends GameAction, Observation extends GameObservation>(game: Game<State, Action, Observation>, agents: Agent<Observation, Action>[], renderer: Renderer<GameState>, fps: number) {\r\n  let state = game.createState(0);\r\n\r\n  function innerLoop() {\r\n    const actions = agents.map((agent, idx) => {\r\n      const obs = game.generateObservation(state, idx)\r\n      return agent.act(obs)\r\n    });\r\n    const { newState, isDone } = game.updateState(state, actions);\r\n    state = newState;\r\n\r\n    if (isDone) {\r\n      console.log(\"Game finished. Restarting...\");\r\n      state = game.createState(0);\r\n\t  renderer.redeploy(state);\r\n    }\r\n\r\n    renderer.render(state);\r\n  }\r\n\r\n  setInterval(innerLoop, 1000 / fps);\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.tsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}