{"version":3,"sources":["shared/shooter_interfaces.ts","Objects/Shooter.jsx","Objects/Bullet.jsx","utils/random.ts","Objects/Tree.jsx","utils/colours.ts","Objects/Grid.jsx","Canvas.jsx","Header.jsx","shared/dumb_bot.ts","shared/gameLoop.ts","shared/shooter_imp.ts","shared/tfSerialize.ts","shared/neuralnet_bot.ts","computeLoop.ts","App.tsx","serviceWorker.js","index.js","assets/expando.png"],"names":["ObstacleShape","GameOptions","gameWidth","gameHeight","fps","playerRadius","playerMoveSpeed","playerTurnSpeed","sensorRadius","noSensors","bulletSpeed","bulletRadius","bulletDamage","bulletCooldown","treeRadius","shooter","config","Bullet","b","this","props","data","rotation","angle","x","y","ref","radius","fill","i","enemy","colour","id","gunWidth","Math","sqrt","gunLength","width","height","gunColour","handRadius","handColour","React","Component","bullet","randBetween","min","max","multiplier","random","floor","tree","Tree","rgb","hex","trees","base_x","base_y","push","key","join","rand","startsWith","slice","length","map","v","parseInt","value","number","letter","toString","repeat","opacity","trunkColour","Grid","freq","pixels","ceil","horizontals","verticals","grid","transparency","background","Canvas","checkSize","bind","updateState","defaults","surface","window","innerWidth","innerHeight","state","implement","obj","Array","isArray","every","arr","res","Object","entries","k","_trees","ShooterState","assign","getScale","scale","minX","minY","setState","addEventListener","removeEventListener","obstacles","x0","players","y0","x1","y1","PADDING","rangeX","abs","rangeY","scaleX","scaleY","isNaN","freqWidth","bullets","layer","getTrees","Links","Header","className","href","location","pathname","title","src","StampedeBot","isEnemyInFront","enemySensors","fireBullet","turnLeft","turnRight","moveForward","KEY_LEFT","KEY_RIGHT","KEY_MOVE","KEY_STOP","ALT_LEFT","ALT_RIGHT","ALT_MOVE","ALT_STOP","KEY_SHOOT","gameLoop","game","agents","renderer","exitOnDone","onExit","createState","totalReward","steps","interval","setInterval","actions","agent","idx","obs","generateObservation","act","newState","isDone","reward","clearInterval","console","log","redeploy","render","delta","ShooterGame","seed","players_result","cooldown","health","generateTrees","n","newBullets","newPlayers","player","action","sourceAgent","newPlayer","moveObject","damagePerPlayer","collides","detectCollision","newBullet","done","agentIdx","sensorSpread","PI","sensors","updateSensors","hypot","cosofangle","cosangle","modofangle","acos","j","obstacle","bulletSensors","obstacleSensors","observationSize","getData","observation","actionSize","getAction","player_id","object","speed","radians","cos","sin","stepx","stepy","shape","Circle","Square","size","dot","xs","ys","result","xn","yn","isColliding","modelToJson","model","a","save","tf","withSaveHandler","artifacts","artifactsToJSON","warn","arrayBuffToken","JSON","stringify","ArrayBuffer","buf","String","fromCharCode","apply","Uint16Array","jsonToModel","json","parse","str","bufView","strLen","charCodeAt","str2ab","substring","jsonToArtifacts","fromMemory","NeuralNetBot","network","out","predict","from","dataSync","dispose","MappedNeuralNetBot","netBot","getNetModel","fetch","text","doEvent","Promise","resolve","then","method","body","App","event","keyCode","preventDefault","_","realPlayer","expando","shrinking","growing","full_screen","handleClick","setTimeout","document","refs","container","expando_img","onClick","createRef","agent1","agent2","current","name","computeLoop","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.1d9816a0.chunk.js","sourcesContent":["import {GameState, GameAction, GameObservation} from \"./interfaces\";\r\n\r\nexport const GameOptions = {\r\n\tgameWidth: 1920,\r\n\tgameHeight: 1080,\r\n\tfps: 30, // so a tick every 1000/30 = 33ms\r\n\r\n\tplayerRadius: 20,\r\n\tplayerMoveSpeed: 50, // pixels / second\r\n\tplayerTurnSpeed: 180, // degrees  / second\r\n\r\n\tsensorRadius: 300,\r\n\r\n\tnoSensors: 20,\r\n\r\n\tbulletSpeed: 500, // pixels / second\r\n\tbulletRadius: 2,\r\n\tbulletDamage: 0.5, // amount of player health removed (starting health is 1)\r\n\tbulletCooldown: 1, // time between bullets\r\n\r\n\ttreeRadius: 30, //\r\n}\r\n\r\nexport interface ShooterState extends GameState {\r\n\tplayers: Array < Player > ;\r\n\tbullets: Array < Bullet > ;\r\n\tobstacles: Array <Obstacle >;\r\n}\r\n\r\nexport interface Player {\r\n  x: number,\r\n  y: number,\r\n  angle: number,\r\n\tcooldown: number,\r\n\thealth: number,\r\n}\r\n\r\nexport interface Bullet {\r\n\tsourceAgent: number;\r\n\tx: number;\r\n\ty: number;\r\n\tangle: number;\r\n}\r\n\r\nexport interface Obstacle {\r\n\tx: number;\r\n\ty: number;\r\n\tshape: ObstacleShape;\r\n\tsize: number;\r\n}\r\n\r\nexport enum ObstacleShape {\r\n\tCircle,\r\n\tSquare,\r\n}\r\n\r\nexport interface ShooterObservation extends GameObservation {\r\n\tx: number;\r\n\ty: number;\r\n\tangle: number;\r\n\tcooldown: number; // seconds left\r\n\thealth: number;\r\n\r\n\t// Sensors are 0 or 1 (indicating presence)\r\n\tenemySensors: Array < number > ;\r\n\tbulletSensors: Array < number > ;\r\n\tobstacleSensors: Array < number > ;\r\n}\r\n\r\n\r\nexport interface ShooterAction extends GameAction {\r\n  fireBullet: boolean;\r\n  // If both are specified (or none) then don't turn\r\n  turnLeft: boolean;\r\n  turnRight: boolean;\r\n  moveForward: boolean;\r\n}\r\n","import React from 'react';\r\nimport {Ellipse, Circle, Rect, Group} from 'react-konva';\r\nimport {GameOptions} from '../shared/shooter_interfaces';\r\nimport config from '../config.json';\r\n\r\nconst {shooter} = config;\r\n\r\nexport default class Bullet extends React.Component {\r\n/*\r\n\tcomponentDidMount() {\r\n\t\tlet shape = this.refs.player;\r\n\t\tlet imageObj = new Image();\r\n\t\timageObj.onload = function() {\r\n\t\t\tshape.fillPatternImage(imageObj);\r\n\t\t\tshape.fillPatternScale({\r\n\t\t\t\tx: GameOptions.playerRadius / 600,\r\n\t\t\t\ty: GameOptions.playerRadius / 600,\r\n\t\t\t})\r\n\t\t};\r\n\t\timageObj.src = '/public/flags.png';\r\n\t}\r\n*/\r\n\trender() {\r\n\t\tlet b = this.props.data;\r\n\t\treturn (\t\t\t\r\n\t\t\t<Group\r\n\t\t\t\trotation={b.angle + 90}\r\n\t\t\t\tx={b.x}\r\n\t\t\t\ty={b.y}\r\n\t\t\t>\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tref='player'\r\n\t\t\t\t\tradius={GameOptions.playerRadius}\r\n\t\t\t\t\tfill={this.props.i ? shooter.enemy : shooter.colour}\r\n\t\t\t\t\trotation={b.angle}\r\n\t\t\t\t/>\t\t\r\n\t\t\t\t<Rect\r\n\t\t\t\t\tid='gun'\r\n\t\t\t\t\tx={-0.5 * shooter.gunWidth}\r\n\t\t\t\t\ty={-Math.sqrt(2) * GameOptions.playerRadius - shooter.gunLength}\r\n\t\t\t\t\twidth={shooter.gunWidth}\r\n\t\t\t\t\theight={shooter.gunLength}\r\n\t\t\t\t\tfill={shooter.gunColour}\r\n\t\t\t\t/>\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tid='left-hand'\r\n\t\t\t\t\t//x={-GameOptions.playerRadius / (Math.sqrt(2))}\r\n\t\t\t\t\t//y={-GameOptions.playerRadius / (Math.sqrt(2))}\r\n\t\t\t\t\ty={-GameOptions.playerRadius}\r\n\t\t\t\t\tradius={5}\r\n\t\t\t\t\tfill='white'\r\n\t\t\t\t\trotation={b.angle}\r\n\t\t\t\t/>\r\n\t\t\t\t<Ellipse\r\n\t\t\t\t\tid='right-hand'\r\n\t\t\t\t\twidth={shooter.handRadius * 2}\r\n\t\t\t\t\theight={shooter.handRadius * 2}\r\n\t\t\t\t\tx={shooter.gunWidth}\r\n\t\t\t\t\ty={-2 * GameOptions.playerRadius}\r\n\t\t\t\t\t//height={GameOptions.playerRadius}\r\n\t\t\t\t\t//x={Math.sqrt((GameOptions.playerRadius ** 2) / 8)}\r\n\t\t\t\t\t//y={-3 * Math.sqrt((GameOptions.playerRadius ** 2) / 8)}\r\n\t\t\t\t\t//rotation={-45}\r\n\t\t\t\t\tfill={shooter.handColour}\r\n\t\t\t\t/>\r\n\t\t\t</Group>\r\n\t\t)\r\n\t}\r\n}","import React from 'react';\r\nimport {Circle, Group} from 'react-konva';\r\n\r\nimport {GameOptions} from '../shared/shooter_interfaces';\r\nimport config from '../config.json';\r\nconst {bullet} = config;\r\n\r\nexport default class Bullet extends React.Component {\r\n\r\n\trender() {\r\n\t\tlet b = this.props.data;\r\n\t\treturn (\r\n\t\t\t<Group\r\n\t\t\t\trotation={b.angle}\r\n\t\t\t\tx={b.x}\r\n\t\t\t\ty={b.y}\r\n\t\t\t>\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tradius={GameOptions.bulletRadius}\r\n\t\t\t\t\tfill={bullet.colour}\r\n\t\t\t\t/>\r\n\t\t\t</Group>\r\n\t\t)\r\n\t}\r\n}","export function randBetween(min: number, max: number): number {\r\n\tlet multiplier = Math.random();\r\n\treturn Math.floor(multiplier * (max - min + 1) + min);\r\n}","import React from 'react';\r\nimport {Circle, Group} from 'react-konva';\r\n\r\nimport {randBetween} from '../utils/random';\r\nimport {parseHex, parseRGB} from '../utils/colours'\r\n\r\nimport {GameOptions} from '../shared/shooter_interfaces.ts';\r\nimport config from '../config.json';\r\nconst {tree} = config;\r\n\r\nexport default class Tree extends React.Component {\r\n\r\n\trender() {\r\n\t\tlet b = this.props;\r\n\t\tlet trees = [];\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\tlet base_x = i & 1;\r\n\t\t\tlet base_y = i & 2;\r\n\t\t\ttrees.push(\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tkey={['tree', b.x, b.y, i].join('.')}\r\n\t\t\t\t\tx={((base_x ? 1 : -1) * GameOptions.treeRadius) + randBetween(-20, 20, this.props.rand)}\r\n\t\t\t\t\ty={((base_y ? 1 : -1) * GameOptions.treeRadius) + randBetween(-20, 20, this.props.rand)}\r\n\t\t\t\t\tradius={randBetween(GameOptions.treeRadius * 2, GameOptions.treeRadius * 3, this.props.rand)}\r\n\t\t\t\t\tfill={parseHex(parseRGB(tree.colour).map(value => value += randBetween(-30, 30, this.props.rand)))}\r\n\t\t\t\t\topacity={0.6}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<Group\r\n\t\t\t\trotation={randBetween(0, 360, this.props.rand)}\r\n\t\t\t\tx={b.x}\r\n\t\t\t\ty={b.y}\r\n\t\t\t>\r\n\t\t\t\t{trees}\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tradius={GameOptions.treeRadius + 5}\r\n\t\t\t\t\tfill='black'\r\n\t\t\t\t\topacity={0.6}\r\n\t\t\t\t/>\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tkey={['tree', b.x, b.y, 'trunk'].join('.')}\r\n\t\t\t\t\tid={['tree', b.x, b.y, 'trunk'].join('.')}\r\n\t\t\t\t\tradius={GameOptions.treeRadius}\r\n\t\t\t\t\tfill={tree.trunkColour}\r\n\t\t\t\t\topacity={0.8}\r\n\t\t\t\t/>\t\t\t\r\n\t\t\t</Group>\r\n\t\t)\r\n\t}\r\n}","export function parseRGB(hex: string): Array<number> {\r\n\tif (hex.startsWith('#')) hex = hex.slice(1);\r\n\tif (hex.length !== 6) return [0, 0, 0];\r\n\tlet r = hex.slice(0, 2);\r\n\tlet g = hex.slice(2, 4);\r\n\tlet b = hex.slice(4, 6);\r\n\treturn [r, g, b].map(v => parseInt(v, 16));\r\n}\r\n\r\nexport function parseHex(rgb: Array<number>): string {\r\n\tlet hex = '#' + rgb.map((number: number) => {\r\n\t\tlet letter = number.toString(16);\r\n\t\treturn '0'.repeat(2 - letter.length) + letter;\r\n\t}).join('');\r\n\treturn hex;\r\n}","import React from 'react';\r\nimport {Rect, Group} from 'react-konva';\r\n\r\nimport config from '../config.json';\r\n\r\nexport default class Grid extends React.Component {\r\n\r\n\trender() {\r\n\t\tconst {height, width, freq} = this.props;\r\n\t\tlet pixels = Math.ceil(width / freq);\r\n\t\tlet horizontals = [];\r\n\t\tlet verticals = [];\r\n\t\tfor (let i = 0; i < freq; i++) {\r\n\t\t\thorizontals.push(<Rect\r\n\t\t\t\tkey={['grid', 'horizontal', i].join('.')}\r\n\t\t\t\tx={pixels * i}\r\n\t\t\t\twidth={2}\r\n\t\t\t\theight={height}\r\n\t\t\t\tfill='black'\r\n\t\t\t\topacity={config.grid.transparency}\r\n\t\t\t/>)\r\n\t\t}\r\n\t\tfor (let i = 0; i < Math.ceil(height / pixels); i++) {\r\n\t\t\tverticals.push(<Rect\r\n\t\t\t\tkey={['grid', 'vertical', i].join('.')}\r\n\t\t\t\ty={pixels * i}\r\n\t\t\t\theight={1}\r\n\t\t\t\twidth={width}\r\n\t\t\t\tfill='black'\r\n\t\t\t\topacity={config.grid.transparency}\r\n\t\t\t/>)\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<Group>\r\n\t\t\t\t{verticals}\r\n\t\t\t\t{horizontals}\r\n\t\t\t</Group>\r\n\t\t)\r\n\t}\r\n}","import React from 'react';\r\nimport { Stage, Layer, Rect, Text } from 'react-konva';\r\n\r\nimport Shooter from './Objects/Shooter';\r\nimport Bullet from './Objects/Bullet';\r\nimport Tree from './Objects/Tree';\r\nimport Grid from './Objects/Grid';\r\n\r\nimport {randBetween} from './utils/random';\r\n\r\nimport config from './config.json';\r\nimport defaults from './defaults.json';\r\n\r\nimport {GameOptions} from './shared/shooter_interfaces';\r\n\r\nconst {background} = config;\r\n\r\nexport default class Canvas extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.checkSize = this.checkSize.bind(this);\r\n\t\tthis.updateState = this.updateState.bind(this);\r\n\t\tdefaults.surface.width = window.innerWidth;\r\n\t\tdefaults.surface.height = window.innerHeight;\r\n\t\tthis.state = implement(defaults);\r\n\t\tthis.state.rand = Math.random();\r\n\t\t/*setInterval(() => this.updateState({\r\n\t\t\tplayers: implement(defaults.players),\r\n\t\t\tbullets: implement(defaults.bullets)\r\n\t\t}), 1000 / config.frameRate);*/\r\n\t}\r\n\r\n\tredeploy(props) {\r\n\t\tif (props) {\r\n\t\t\tif (this._trees) delete this._trees;\r\n\t\t}\r\n\t}\r\n\r\n\tupdateState(ShooterState) {\r\n\t\tlet state = Object.assign(this.state, ShooterState);\r\n\t\tlet [scale, minX, minY] = this.getScale(state);\r\n\t\tstate = Object.assign(state, { scale, minX, minY });\r\n\t\tthis.setState(state);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.checkSize();\r\n\t\twindow.addEventListener('resize', this.checkSize);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\twindow.removeEventListener('resize', this.checkSize);\r\n\t}\r\n\r\n\tcheckSize() {\r\n\t\tlet state = this.state;\r\n\t\tstate.surface.width = window.innerWidth;\r\n\t\tstate.surface.height = window.innerHeight;\r\n\t\tthis.setState(state);\r\n\t}\r\n\r\n\tgetTrees(obstacles = []) {\r\n\t\tif (this._trees && this._trees.length) return this._trees;\r\n\t\tlet trees = [];\r\n\t\tfor (let i = 0; i < obstacles.length; i++) {\r\n\t\t\ttrees.push(<Tree\r\n\t\t\t\tkey={['tree', i].join('.')}\r\n\t\t\t\t{...obstacles[i]}\r\n\t\t\t/>);\r\n\t\t}\r\n\t\treturn this._trees = trees;\r\n\t}\r\n\r\n\tgetScale(state) {\r\n\t\tlet x0 = state.players[0].x; let y0 = state.players[0].y;\r\n\t\tlet x1 = state.players[1].x; let y1 = state.players[1].y;\r\n\r\n\t\tconst PADDING = 50 + GameOptions.playerRadius;\r\n\t\tlet minX = Math.min(x0, x1) - PADDING;\r\n\t\tlet minY = Math.min(y0, y1) - PADDING;\r\n\t\tlet rangeX = Math.abs(x1 - x0) + 2 * PADDING\r\n\t\tlet rangeY = Math.abs(y1 - y0) + 2 * PADDING\r\n\r\n\t\tlet scaleX = window.innerWidth / rangeX;\r\n\t\tlet scaleY = window.innerHeight / rangeY;\r\n\t\tlet scale = Math.min(Math.min(scaleX, scaleY), 2);\r\n\t\tif (isNaN(scale)) scale = 1;\r\n\r\n\t\treturn [scale, minX - 10, minY - 10];\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <Stage {...this.state.surface}\r\n\t\t\tx={-this.state.minX * this.state.scale}\r\n\t\t\ty={-this.state.minY * this.state.scale}\r\n\t\t\tscale={{ x: this.state.scale, y: this.state.scale }}\r\n\t\t>\r\n\t\t\t<Layer id='background'>\t\t\t\t\r\n\t\t\t\t<Rect\r\n\t\t\t\t\twidth={GameOptions.gameWidth}\r\n\t\t\t\t\theight={GameOptions.gameHeight}\r\n\t\t\t\t\tfill={background.colour}\r\n\t\t\t\t/>\r\n\t\t\t</Layer>\r\n\t\t\t<Layer id='grid'>\t\t\t\t\r\n\t\t\t\t<Grid\r\n\t\t\t\t\twidth={GameOptions.gameWidth}\r\n\t\t\t\t\theight={GameOptions.gameHeight}\r\n\t\t\t\t\tfreq={config.grid.freqWidth}\r\n\t\t\t\t/>\r\n\t\t\t</Layer>\r\n\t\t\t<Layer id='bullets'>\r\n\t\t\t\t{this.state.bullets.map((b, i) => <Bullet\r\n\t\t\t\t\tkey = {['bullet', i].join('.')}\r\n\t\t\t\t\tdata={b}\r\n\t\t\t\t/>)}\r\n\t\t\t</Layer>\r\n\t\t\t<Layer id='players' {...this.state.layer}>\t\t\t\r\n\t\t\t\t{this.state.players.map((b, i) => <Shooter\r\n\t\t\t\t\tkey={['shooter', i].join('.')}\r\n\t\t\t\t\ti={i}\r\n\t\t\t\t\tdata={b}\r\n\t\t\t\t/>)}\r\n\t\t\t</Layer>\r\n\t\t\t<Layer id='trees'>\r\n\t\t\t\t{this.getTrees(this.state.obstacles)}\r\n\t\t\t</Layer>\r\n\t\t</Stage>\r\n\t}\r\n}\r\n\r\nfunction implement(obj) {\r\n\tif (Array.isArray(obj)) {\r\n\t\tif (!obj.every(value => typeof value === 'number')) {\r\n\t\t\tlet arr = [];\r\n\t\t\tfor (let value of obj) {\r\n\t\t\t\tif (typeof value !== 'object') arr.push(value);\r\n\t\t\t\telse arr.push(implement(value));\r\n\t\t\t}\r\n\t\t\treturn arr;\r\n\t\t}\r\n\t\telse return randBetween(obj[0], obj[1]);\r\n\t}\r\n\tlet res = {};\r\n\tfor (let [k, v] of Object.entries(obj)) {\r\n\t\tif (typeof v !== 'object') res[k] = v;\r\n\t\telse res[k] = implement(v);\r\n\t}\r\n\treturn res;\r\n}","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Links = [\r\n\t['Our story', 'container'],\r\n\t['Technologies', 'technologies']\r\n]\r\n\r\nexport default class Header extends React.Component {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className='Header'>\r\n\t\t\t\t<a href={window.location.href.slice(0, -window.location.pathname.length)}>\r\n\t\t\t\t\t<h1>ENDER'S COMPUTATION</h1>\r\n\t\t\t\t</a>\r\n\t\t\t\t{Links.map(([title, id]) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<a href={window.location.href.slice(0, -window.location.pathname.length)+ '#' + id}>\r\n\t\t\t\t\t\t\t<h2>{title}</h2>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t\t<img id='mlh' src='https://s3.amazonaws.com/logged-assets/trust-badge/2020/mlh-trust-badge-2020-white.svg'/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import {\r\n\tAgent,\r\n} from \"./interfaces\";\r\nimport {\r\n\tShooterObservation,\r\n\tShooterAction,\r\n} from \"./shooter_interfaces\";\r\n\r\nexport class DumbAgent implements Agent < ShooterObservation, ShooterAction > {\r\n\tact(state: ShooterObservation): ShooterAction {\r\n\t\treturn {\r\n\t\t\tfireBullet: true,\r\n\t\t\tturnLeft: false,\r\n\t\t\tturnRight: false,\r\n\t\t\tmoveForward: true,\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport class StampedeBot implements Agent < ShooterObservation, ShooterAction > {\r\n\tact(state: ShooterObservation): ShooterAction {\r\n\t\tlet isEnemyInFront = state.enemySensors[0] === 1;\r\n\t\treturn {\r\n\t\t\tfireBullet: isEnemyInFront,\r\n\t\t\tturnLeft: !isEnemyInFront,\r\n\t\t\tturnRight: false,\r\n\t\t\tmoveForward: isEnemyInFront,\r\n\t\t};\r\n\t}\r\n}\r\n\r\nconst KEY_LEFT = 37;\r\nconst KEY_RIGHT = 39;\r\nconst KEY_MOVE = 38;\r\nconst KEY_STOP = 40;\r\nconst ALT_LEFT = 65;\r\nconst ALT_RIGHT = 68;\r\nconst ALT_MOVE = 87;\r\nconst ALT_STOP = 83;\r\nconst KEY_SHOOT = 32;\r\n\r\nexport function realPlayer(): [(event: KeyboardEvent) => void, (event: KeyboardEvent) => void, Agent < ShooterObservation, ShooterAction > ] {\r\n\r\n\tconst action = {\r\n\t\tturnLeft: false,\r\n\t\tturnRight: false,\r\n\t\tmoveForward: false,\r\n\t\tfireBullet: false\r\n\t};\r\n\r\n\r\n\tfunction keyDown(event: KeyboardEvent): void {\r\n\t\tswitch (event.keyCode) {\r\n\t\t\tcase KEY_LEFT:\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\taction.turnLeft = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase KEY_RIGHT:\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\taction.turnRight = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase KEY_MOVE:\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\taction.moveForward = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase KEY_STOP:\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\taction.moveForward = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ALT_LEFT:\r\n\t\t\t\taction.turnLeft = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ALT_RIGHT:\r\n\t\t\t\taction.turnRight = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ALT_MOVE:\r\n\t\t\t\taction.moveForward = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ALT_STOP:\r\n\t\t\t\taction.moveForward = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase KEY_SHOOT:\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\taction.fireBullet = true;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction keyUp(event: KeyboardEvent): void {\r\n\t\tswitch (event.keyCode) {\r\n\t\t\tcase KEY_LEFT:\r\n\t\t\t\taction.turnLeft = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase KEY_RIGHT:\r\n\t\t\t\taction.turnRight = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase KEY_MOVE:\r\n\t\t\t\taction.moveForward = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ALT_LEFT:\r\n\t\t\t\taction.turnLeft = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ALT_RIGHT:\r\n\t\t\t\taction.turnRight = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ALT_MOVE:\r\n\t\t\t\taction.moveForward = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase KEY_SHOOT:\r\n\t\t\t\taction.fireBullet = false;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\treturn [keyUp, keyDown, {\r\n\t\tact: _ => action\r\n\t}];\r\n}\r\n\r\nexport class RealPlayer implements Agent < ShooterObservation, ShooterAction > {\r\n\tprivate rotate_left: boolean;\r\n\tprivate rotate_right: boolean;\r\n\tprivate move: boolean;\r\n\tprivate shoot: boolean;\r\n\r\n\tconstructor() {\r\n\t\tthis.rotate_left = false;\r\n\t\tthis.rotate_right = false;\r\n\t\tthis.move = true;\r\n\t\tthis.shoot = false;\r\n\t}\r\n\r\n\tkeyDown(event: KeyboardEvent): void {\r\n\t\tswitch (event.keyCode) {\r\n\t\t\tcase KEY_LEFT:\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.rotate_left = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase KEY_RIGHT:\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.rotate_right = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase KEY_MOVE:\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.move = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase KEY_STOP:\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.move = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ALT_LEFT:\r\n\t\t\t\t\tthis.rotate_left = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\tcase ALT_RIGHT:\r\n\t\t\t\tthis.rotate_right = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ALT_MOVE:\r\n\t\t\t\tthis.move = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ALT_STOP:\r\n\t\t\t\tthis.move = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase KEY_SHOOT:\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.shoot = true;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tkeyUp(event: KeyboardEvent): void {\r\n\t\tswitch (event.keyCode) {\r\n\t\t\tcase KEY_LEFT:\r\n\t\t\t\tthis.rotate_left = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase KEY_RIGHT:\r\n\t\t\t\tthis.rotate_right = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase KEY_MOVE:\r\n\t\t\t\tthis.move = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ALT_LEFT:\r\n\t\t\t\tthis.rotate_left = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ALT_RIGHT:\r\n\t\t\t\tthis.rotate_right = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ALT_MOVE:\r\n\t\t\t\tthis.move = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase KEY_SHOOT:\r\n\t\t\t\tthis.shoot = false;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tact(state: ShooterObservation): ShooterAction {\r\n\t\treturn {\r\n\t\t\tfireBullet: this.shoot,\r\n\t\t\tturnLeft: this.rotate_left,\r\n\t\t\tturnRight: this.rotate_right,\r\n\t\t\tmoveForward: this.move,\r\n\t\t};\r\n\t}\r\n}","import { Game, GameState, GameAction, GameObservation, Renderer, Agent } from \"./interfaces\";\r\nimport { existsTypeAnnotation } from \"@babel/types\";\r\n\r\nexport type ExitT = {\r\n  totalReward: number;\r\n  steps: number;\r\n}\r\n\r\nexport function gameLoop<\r\n  State extends GameState, Action extends GameAction, Observation extends GameObservation>(game: Game<State, Action, Observation>, agents: Agent<Observation, Action>[], renderer: Renderer<GameState>, fps: number, exitOnDone: boolean = false, onExit: (t: ExitT) => void = () => {}) {\r\n  let state = game.createState(0);\r\n  let totalReward = 0\r\n  let steps = 0\r\n\r\n  function innerLoop() {\r\n    const actions = agents.map((agent, idx) => {\r\n      const obs = game.generateObservation(state, idx)\r\n      return agent.act(obs)\r\n    });\r\n    const { newState, isDone, reward } = game.updateState(state, actions);\r\n    state = newState;\r\n\r\n    totalReward += reward[0]\r\n    steps += 1\r\n\r\n    if (isDone) {\r\n      if (exitOnDone) {\r\n        clearInterval(interval);\r\n        onExit({ totalReward, steps });\r\n        return;\r\n      }\r\n      console.log(\"Game finished. Restarting...\");\r\n      state = game.createState(0);\r\n\t  renderer.redeploy(state);\r\n    }\r\n\r\n    renderer.render(state);\r\n  }\r\n\r\n  const interval = setInterval(innerLoop, 1000 / fps);\r\n\r\n}","import { Game, StateUpdate } from \"./interfaces\"\r\nimport { ShooterAction, ShooterState, ShooterObservation, GameOptions, Player, Bullet, Obstacle, ObstacleShape, } from \"./shooter_interfaces\";\r\nimport { randBetween, } from \"../utils/random\";\r\n\r\nconst delta = 1 / GameOptions.fps;\r\n\r\nexport const ShooterGame: Game<ShooterState, ShooterAction, ShooterObservation> = {\r\n\r\n  createState(seed: number): ShooterState {\r\n\r\n    let player1 = {\r\n      x: randBetween(GameOptions.playerRadius, GameOptions.gameWidth - GameOptions.playerRadius),\r\n      y: randBetween(GameOptions.playerRadius, GameOptions.gameHeight - GameOptions.playerRadius),\r\n      angle: 45,\r\n      cooldown: 0,\r\n      health: 1,\r\n    };\r\n    let player2 = {\r\n\t\tx: randBetween(GameOptions.playerRadius, GameOptions.gameWidth - GameOptions.playerRadius),\r\n\t\ty: randBetween(GameOptions.playerRadius, GameOptions.gameHeight - GameOptions.playerRadius),\r\n      angle: 225,\r\n      cooldown: 0,\r\n      health: 1,\r\n    };\r\n\r\n    let players_result = [player1, player2];\r\n    return {\r\n      players: players_result,\r\n      bullets: [],\r\n      obstacles: generateTrees(players_result, Math.floor(GameOptions.gameWidth * GameOptions.gameHeight / 40000)),\r\n    };\r\n  },\r\n\r\n  updateState(state: ShooterState, actions: ShooterAction[]): StateUpdate<ShooterState> {\r\n    const n = state.players.length;\r\n\r\n    const newBullets = [];\r\n    const newPlayers = [];\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      const player = state.players[i];\r\n      const action = actions[i];\r\n\r\n      let cooldown = player.cooldown;\r\n      let angle = player.angle;\r\n\r\n      if (action.fireBullet && player.cooldown < 0.01) {\r\n        newBullets.push({sourceAgent: i, x: player.x, y: player.y, angle: player.angle});\r\n        cooldown = GameOptions.bulletCooldown;\r\n      } else {\r\n        cooldown = Math.max(0, cooldown - delta);\r\n      }\r\n\r\n      if (action.turnLeft) angle -= (GameOptions.playerTurnSpeed * delta) % 360;\r\n      if (action.turnRight) angle += (GameOptions.playerTurnSpeed * delta) % 360;\r\n\r\n      let newPlayer = {\r\n        ...player,\r\n        cooldown,\r\n        angle\r\n      };\r\n      if (action.moveForward) {\r\n        newPlayer = moveObject(newPlayer, GameOptions.playerMoveSpeed * delta, GameOptions.playerRadius, state.obstacles);\r\n      }\r\n\r\n      newPlayers.push(newPlayer);\r\n    }\r\n\r\n    const damagePerPlayer = Array(n).fill(0);\r\n\r\n    for (const bullet of state.bullets) {\r\n      let collides = false;\r\n      for (let i = 0; i < n; i++) {\r\n        const player = state.players[i];\r\n        if (detectCollision(player, bullet, i)) {\r\n          collides = true;\r\n          damagePerPlayer[i] += GameOptions.bulletDamage;\r\n          break;\r\n        }\r\n      }\r\n      if (!collides) {\r\n        let newBullet = moveObject(bullet, GameOptions.bulletSpeed * delta, 0, state.obstacles);\r\n        if (newBullet.x > 0 && newBullet.x < GameOptions.gameWidth && newBullet.y > 0 && newBullet.y < GameOptions.gameHeight){\r\n          newBullets.push(newBullet);\r\n        }\r\n      }\r\n    }\r\n\r\n    let done = false;\r\n    for (let i = 0; i < n; i++) {\r\n      newPlayers[i].health -= damagePerPlayer[i];\r\n      if (newPlayers[i].health < 0.01) {\r\n        done = true;\r\n      }\r\n    }\r\n\r\n    return {\r\n      newState: { ...state, players: newPlayers, bullets: newBullets },\r\n      isDone: done,\r\n      reward: damagePerPlayer.map(x => -x),\r\n    };\r\n  },\r\n\r\n  generateObservation(state: ShooterState, agentIdx: number): ShooterObservation {\r\n    let agent = state.players[agentIdx];\r\n    let x = agent.x;\r\n    let y = agent.y;\r\n    let angle = agent.angle;\r\n    let cooldown = agent.cooldown;\r\n\r\n    let sensorSpread = 2 * Math.PI / GameOptions.noSensors;\r\n\r\n    //[enemies, bullets, collisions]\r\n    let sensors = [new Array(GameOptions.noSensors), new Array(GameOptions.noSensors), new Array(GameOptions.noSensors)];\r\n\r\n    let n = state.players.length;\r\n\r\n    function updateSensors(x1: number, y1: number, i: number) {\r\n      if(Math.hypot(x - x1, y - y1) < GameOptions.sensorRadius){\r\n        let cosofangle = cosangle([x, y], [x1, y1]);\r\n        let modofangle = Math.acos(cosofangle);\r\n        let anotherangle = Math.acos(cosangle([y, -x], [x1, y1]))\r\n        if( anotherangle < Math.PI / 2) {\r\n          modofangle = 2 * Math.PI - modofangle;\r\n        }\r\n        let k = Math.floor(modofangle / sensorSpread);\r\n        if(k == GameOptions.noSensors) {k--;}\r\n        sensors[i][k] = 1;\r\n      }\r\n    };\r\n\r\n    for(let j = 0; j < n; j ++) {\r\n      if(j === agentIdx) {continue;}\r\n      let x1 = state.players[j].x;\r\n      let y1 = state.players[j].y;\r\n      updateSensors(x1, y1, 0)\r\n    }\r\n    for(var bullet of state.bullets) {\r\n      if(bullet.sourceAgent == agentIdx) {continue;}\r\n      let x1 = bullet.x;\r\n      let y1 = bullet.y;\r\n      updateSensors(x1, y1, 1);\r\n    }\r\n    for(var obstacle of state.obstacles) {\r\n      let x1 = obstacle.x;\r\n      let y1 = obstacle.y;\r\n      updateSensors(x1, y1, 2);\r\n    }\r\n\r\n    return {\r\n      x: x,\r\n      y: y,\r\n      angle: angle,\r\n      cooldown: cooldown, // seconds left\r\n      health: agent.health,\r\n\r\n      // Sensors are 0 or 1 (indicating presence)\r\n      enemySensors: sensors[0],\r\n      bulletSensors: sensors[1],\r\n      obstacleSensors: sensors[2],\r\n    };\r\n  },\r\n\r\n  observationSize: 5 + 3 * GameOptions.noSensors,\r\n  getData(observation: ShooterObservation): number[] {\r\n    return [\r\n      observation.x,\r\n      observation.y,\r\n      observation.angle,\r\n      observation.cooldown,\r\n      observation.health,\r\n      ...observation.obstacleSensors,\r\n      ...observation.enemySensors,\r\n      ...observation.bulletSensors,\r\n    ];\r\n  },\r\n\r\n  actionSize: 4,\r\n  getAction(data: number[]): ShooterAction {\r\n    return {\r\n      fireBullet: data[0] > 0.5,\r\n      turnLeft: data[1] > 0.5,\r\n      turnRight: data[2] > 0.5,\r\n      moveForward: data[3] > 0.5,\r\n    }\r\n  }\r\n}\r\n\r\nfunction detectCollision(player: Player, bullet: Bullet, player_id: number) {\r\n  return Math.hypot(player.x - bullet.x, player.y - bullet.y, 2) < (GameOptions.playerRadius + GameOptions.bulletRadius)\r\n    && bullet.sourceAgent != player_id;\r\n}\r\n\r\nfunction moveObject<T extends { x: number, y: number, angle: number }>(object: T, speed: number, radius: number, obstacles: Array<Obstacle>): T {\r\n  let radians = object.angle / 180 * Math.PI;\r\n  let x = object.x + Math.cos(radians) * speed;\r\n  let y = object.y + Math.sin(radians) * speed;\r\n  if (x > GameOptions.gameWidth - radius) {\r\n    x = GameOptions.gameWidth - radius;\r\n  }\r\n  else if (x < radius) {\r\n    x = radius;\r\n  }\r\n  if (y > GameOptions.gameHeight - radius) {\r\n    y = GameOptions.gameHeight - radius;\r\n  }\r\n  else if (y < radius) {\r\n    y = radius;\r\n  }\r\n\r\n  for(let obstacle of obstacles) {\r\n    let stepx = 0.05 * (x - obstacle.x)\r\n    let stepy = 0.05 * (y - obstacle.y)\r\n    switch(obstacle.shape) {\r\n      case ObstacleShape.Circle:\r\n        while(radius + obstacle.size > Math.hypot(x - obstacle.x, y - obstacle.y) + 0.1){\r\n          x += stepx;\r\n          y += stepy;\r\n          if(radius < 1) {\r\n            x = 1000000;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      case ObstacleShape.Square:\r\n        //TODO it does the same what circle\r\n        while(radius + obstacle.size > Math.hypot(x - obstacle.x, y - obstacle.y) + 0.1){\r\n          x += stepx;\r\n          y += stepy;\r\n          if(radius < 1) {\r\n            x = 1000000;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  }\r\n  return {\r\n    ...object,\r\n    x: x,\r\n    y: y,\r\n  };\r\n}\r\n\r\nfunction dot(xs: Array<number>, ys: Array<number>) {\r\n  let result = 0;\r\n  let xn = xs.length;\r\n  let yn = ys.length;\r\n  for(let i = 0; i < xn && i < yn; i++) {\r\n    result += xs[i] * ys[i];\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction cosangle(xs: Array<number>, ys: Array<number>) {\r\n  return dot(xs, ys) / Math.sqrt(dot(xs, xs) * dot(ys, ys));\r\n}\r\n\r\nfunction generateTrees(players: Array<Player>, n: number): Array<Obstacle> {\r\n  let trees: Array<Obstacle> = [];\r\n  for(let i = 0; i < n; i++){\r\n    let x = randBetween(0, GameOptions.gameWidth);\r\n    let y = randBetween(0, GameOptions.gameHeight);\r\n    let size = GameOptions.treeRadius;\r\n    let isColliding = false;\r\n    for(let player of players) {\r\n      if(Math.hypot(x - player.x, y - player.y) < GameOptions.playerRadius + size - 0.1) {isColliding = true; break;}\r\n    }\r\n    if(!isColliding){\r\n      trees.push({\r\n        x: x,\r\n        y: y,\r\n        shape: ObstacleShape.Circle,\r\n        size: size,\r\n      });\r\n    }\r\n  }\r\n  return trees;\r\n}\r\n","import * as tf from \"@tensorflow/tfjs\";\r\nimport { SaveResult } from \"@tensorflow/tfjs-core/dist/io/io\";\r\n\r\nexport async function modelToJson(model: tf.LayersModel): Promise<string> {\r\n  let res: string | null = null;\r\n  await model.save(tf.io.withSaveHandler(async (artifacts: tf.io.ModelArtifacts) => {\r\n    res = artifactsToJSON(artifacts);\r\n    return (null as unknown) as SaveResult;\r\n  }));\r\n  if (res === null) {\r\n    // tslint:disable-next-line: no-console\r\n    console.warn(\"WARNING: Model didn't export!\");\r\n  }\r\n  return (res as unknown) as string;\r\n}\r\n\r\n// Random token to signify string is array buffer\r\nconst arrayBuffToken = \"%%ab%%\";\r\n\r\nfunction artifactsToJSON(artifacts: tf.io.ModelArtifacts) {\r\n  function replacer(key: any, value: any) {\r\n    if (value instanceof ArrayBuffer) {\r\n      return arrayBuffToken + ab2str(value);\r\n    }\r\n    return value;\r\n  }\r\n  return JSON.stringify(artifacts, replacer);\r\n}\r\n\r\nexport function jsonToModel(json: string): Promise<tf.LayersModel> {\r\n  const artifacts = jsonToArtifacts(json);\r\n  return tf.loadLayersModel(tf.io.fromMemory(artifacts));\r\n}\r\n\r\nfunction jsonToArtifacts(json: string): tf.io.ModelArtifacts {\r\n  function reviver(key: any, value: any) {\r\n    if (typeof value === \"string\" && value.startsWith(arrayBuffToken)) {\r\n      return str2ab(value.substring(arrayBuffToken.length));\r\n    }\r\n    return value;\r\n  }\r\n  return JSON.parse(json, reviver);\r\n}\r\n\r\nfunction ab2str(buf: ArrayBuffer): string {\r\n  return String.fromCharCode.apply(null, (new Uint16Array(buf) as unknown) as number[] );\r\n}\r\n\r\nfunction str2ab(str: string): ArrayBuffer {\r\n  const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\r\n  const bufView = new Uint16Array(buf);\r\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\r\n    bufView[i] = str.charCodeAt(i);\r\n  }\r\n  return buf;\r\n}\r\n","import {Agent, Game, } from \"./interfaces\";\r\nimport {ShooterObservation, ShooterAction, } from \"./shooter_interfaces\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n\r\nexport class NeuralNetBot implements Agent<number[], number[]> {\r\n\r\n  private network: tf.LayersModel;\r\n\r\n  constructor(network: tf.LayersModel) {\r\n    this.network = network\r\n  }\r\n\r\n  act(state: number[]): number[] {\r\n    const out = this.network.predict(tf.tensor2d([state])) as tf.Tensor\r\n    const data = Array.from(out.dataSync())\r\n    out.dispose();\r\n    return data;\r\n  }\r\n}\r\n\r\nexport function MappedNeuralNetBot<State, Action, Observation>(network: tf.LayersModel, game: Game<State, Action, Observation>): Agent<Observation, Action> {\r\n  const netBot = new NeuralNetBot(network)\r\n  return { act: obs => game.getAction(netBot.act(game.getData(obs))) };\r\n}","import { jsonToModel, modelToJson } from \"./shared/tfSerialize\"\r\nimport { gameLoop } from \"./shared/gameLoop\";\r\nimport { ShooterGame } from \"./shared/shooter_imp\";\r\nimport { MappedNeuralNetBot } from \"./shared/neuralnet_bot\";\r\nimport { StampedeBot } from \"./shared/dumb_bot\";\r\n\r\nasync function getNetModel() {\r\n  const res = await fetch(\"http://localhost:4321/models/shooter\")\r\n  const text = await res.text()\r\n  const model = await jsonToModel(text)\r\n  \r\n  return model;\r\n}\r\n\r\nasync function doEvent() {\r\n  const model = await getNetModel();\r\n  console.log(\"Got model...\")\r\n  return new Promise<void>(resolve => {\r\n    gameLoop(\r\n      ShooterGame,\r\n      [ MappedNeuralNetBot(model, ShooterGame), new StampedeBot() ],\r\n      { render: () => { }, redeploy: () => { } },\r\n      200,\r\n      true,\r\n      ({ totalReward, steps }) => {\r\n        console.log(\"Done\")\r\n        modelToJson(model).then(json => {\r\n          fetch(\"http://localhost:4321/models/shooter\", { method: 'POST', body: json }).then(() => {\r\n            resolve()\r\n            console.log(\"DONE!\")\r\n          })\r\n        });\r\n      }\r\n    )\r\n  });\r\n}\r\n\r\nexport async function computeLoop() {\r\n  while (true) {\r\n    await doEvent();\r\n  }\r\n}","import React, { ReactElement } from 'react';\r\nimport Canvas from './Canvas';\r\nimport Header from './Header';\r\nimport './App.scss';\r\nimport { DumbAgent, StampedeBot, realPlayer } from './shared/dumb_bot';\r\nimport { gameLoop } from './shared/gameLoop';\r\nimport { GameOptions } from './shared/shooter_interfaces';\r\nimport { ShooterGame } from './shared/shooter_imp';\r\nimport { computeLoop } from './computeLoop';\r\nimport expando_img from './assets/expando.png';\r\n\r\nclass App extends React.Component<{}, {\r\n\texpando: ReactElement | null,\r\n\tshrinking: Boolean,\r\n\tgrowing: Boolean,\r\n\tfull_screen: Boolean\r\n}> {\r\n\r\n\tconstructor(props: Object) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\texpando: null,\r\n\t\t\tshrinking: false,\r\n\t\t\tgrowing: false,\r\n\t\t\tfull_screen: false\r\n\t\t}\r\n\t\tthis.handleClick = this.handleClick.bind(this);\r\n\t}\r\n\r\n\t// private playerAgent = new RealPlayer()\r\n\tprivate player = realPlayer();\r\n\r\n\thandleClick() {\r\n\t\tif (!this.state.growing) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tgrowing: true,\r\n\t\t\t\tshrinking: false\r\n\t\t\t});\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tgrowing: false,\r\n\t\t\t\t\tfull_screen: true\r\n\t\t\t\t})\r\n\t\t\t}, 1000);\r\n\t\t}\r\n\t\telse setTimeout(() => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tgrowing: false,\r\n\t\t\t\tshrinking: true\r\n\t\t\t});\r\n\t\t\tthis.setState({\r\n\t\t\t\tshrinking: false,\r\n\t\t\t\tfull_screen: false\r\n\t\t\t})\r\n\t\t}, 1000);\r\n\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tdocument.addEventListener(\"keydown\", this.player[1]);\r\n\t\tdocument.addEventListener(\"keyup\", this.player[0]);\r\n\t\tlet canvas = this.refs.container;\r\n\t\tlet expando = <img\r\n\t\t\tclassName='expando'\r\n\t\t\tsrc={expando_img}\r\n\t\t\tonClick={this.handleClick}\r\n\t\t/>;\r\n\t\tthis.setState({\r\n\t\t\texpando\r\n\t\t});\r\n\t}\r\n\t\r\n\tcomponentWillUnmount(){\r\n\t\tdocument.removeEventListener(\"keydown\", this.player[1]);\r\n\t\tdocument.removeEventListener(\"keyup\", this.player[0]);\r\n\t}\r\n\trender() {\r\n\t\tlet ref = React.createRef<Canvas>();\r\n\t\tlet agent1 = this.player[2];\r\n\t\tlet agent2 = new StampedeBot();\r\n\t\tgameLoop(ShooterGame, [agent1, agent2],\r\n\t\t\t{\r\n\t\t\t\tredeploy: state => ref.current && ref.current.redeploy(state),\r\n\t\t\t\trender: state => ref.current && ref.current.updateState(state)\r\n\t\t\t},\r\n\t\t\tGameOptions.fps\r\n\t\t)\r\n\t\tlet name = 'App';\r\n\t\tif (this.state.growing) name += '.growing';\r\n\t\tif (this.state.shrinking) name += '.shrinking';\r\n\t\tif (this.state.full_screen) name += '.full-screen';\r\n\r\n\t\tcomputeLoop()\r\n\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<div className='Background'>\r\n\t\t\t\t\t<div className='Wallpaper'/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Header/>\r\n\t\t\t\t<br />\r\n\t\t\t\t<div className='Column'>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName={name}\r\n\t\t\t\t\t\tid='container'\r\n\t\t\t\t\t\tref='container'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{<Canvas ref={ref}/>}\r\n\t\t\t\t\t\t{/*this.state.expando*/}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div id='container'>\r\n\t\t\t\t\t\t<h2>\r\n\t\t\t\t\t\t\tOur story\r\n\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t\t<a href='https://devpost.com/software/ender-s-compute'>\r\n\t\t\t\t\t\t\thttps://devpost.com/software/ender-s-compute\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</>\t\t\t\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.tsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/expando.14dd7c5b.png\";"],"sourceRoot":""}