{"version":3,"sources":["shared/shooter_interfaces.ts","Objects/Shooter.jsx","Objects/Bullet.jsx","utils/random.ts","Objects/Tree.jsx","utils/colours.ts","Objects/Grid.jsx","Canvas.jsx","shared/dumb_bot.ts","shared/shooter_imp.ts","App.tsx","shared/gameLoop.ts","serviceWorker.js","index.js"],"names":["ObstacleShape","GameOptions","gameWidth","gameHeight","fps","playerRadius","playerMoveSpeed","playerTurnSpeed","sensorRadius","noSensors","bulletSpeed","bulletRadius","bulletDamage","bulletCooldown","treeRadius","shooter","config","Bullet","b","this","props","data","rotation","angle","x","y","radius","fill","colour","id","gunWidth","Math","sqrt","gunLength","width","height","gunColour","handRadius","handColour","React","Component","bullet","randBetween","min","max","multiplier","random","floor","tree","Tree","rgb","hex","trees","i","base_x","base_y","push","key","join","rand","startsWith","slice","length","map","v","parseInt","value","number","letter","toString","repeat","opacity","trunkColour","Grid","freq","pixels","ceil","horizontals","verticals","grid","transparency","background","Canvas","checkSize","bind","updateState","defaults","surface","window","innerWidth","innerHeight","state","implement","obj","Array","isArray","every","arr","res","Object","entries","k","ShooterState","assign","getScale","scale","minX","minY","setState","addEventListener","removeEventListener","_trees","x0","players","y0","x1","y1","PADDING","rangeX","abs","rangeY","scaleX","scaleY","isNaN","console","log","freqWidth","layer","getTrees","bullets","StampedeBot","isEnemyInFront","enemySensors","fireBullet","turnLeft","turnRight","moveForward","KEY_LEFT","KEY_RIGHT","KEY_MOVE","KEY_STOP","KEY_SHOOT","delta","ShooterGame","createState","seed","cooldown","health","obstacles","shape","Circle","size","Square","actions","n","newBullets","newPlayers","player","action","sourceAgent","newPlayer","moveObject","damagePerPlayer","collides","detectCollision","newBullet","done","newState","isDone","reward","generateObservation","agentIdx","agent","sensorSpread","bulletSensors","sensorAngle","PI","halfsidevector","cos","sin","longsidevector","playerDetectionRectangle","rectangle","bulletDetectionRectangle","enemyDetected","bulletDetected","j","isInside","obstacleSensors","observationSize","getData","observation","actionSize","getAction","player_id","hypot","object","speed","radians","obstacle","point","AM","AB","AD","AMdotAB","dot","AB2","AMdotAD","AD2","shortvector","longvector","a","xs","ys","result","xn","yn","App","event","keyCode","act","_","realPlayer","document","ref","createRef","agent1","agent2","game","agents","renderer","setInterval","idx","obs","render","gameLoop","current","className","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8097a658.chunk.js","sourcesContent":["import {GameState, GameAction, GameObservation, Agent, Renderer, Game} from \"./interfaces\";\r\n\r\nexport const GameOptions = {\r\n\tgameWidth: 1920,\r\n\tgameHeight: 1080,\r\n\tfps: 30, // so a tick every 1000/30 = 33ms\r\n\r\n\tplayerRadius: 20,\r\n\tplayerMoveSpeed: 50, // pixels / second\r\n\tplayerTurnSpeed: 180, // degrees  / second\r\n\r\n\tsensorRadius: 300,\r\n\r\n\tnoSensors: 20,\r\n\r\n\tbulletSpeed: 500, // pixels / second\r\n\tbulletRadius: 2,\r\n\tbulletDamage: 0.5, // amount of player health removed (starting health is 1)\r\n\tbulletCooldown: 1, // time between bullets\r\n\r\n\ttreeRadius: 30, //\r\n}\r\n\r\nexport interface ShooterState extends GameState {\r\n\tplayers: Array < Player > ;\r\n\tbullets: Array < Bullet > ;\r\n\tobstacles: Array < Obstacle > ;\r\n}\r\n\r\nexport interface Player {\r\n  x: number,\r\n  y: number,\r\n  angle: number,\r\n\tcooldown: number,\r\n\thealth: number,\r\n}\r\n\r\nexport interface Bullet {\r\n\tsourceAgent: number;\r\n\tx: number;\r\n\ty: number;\r\n\tangle: number;\r\n}\r\n\r\nexport interface Obstacle {\r\n\tx: number;\r\n\ty: number;\r\n\tshape: ObstacleShape;\r\n\tsize: number;\r\n}\r\n\r\nexport enum ObstacleShape {\r\n\tCircle,\r\n\tSquare,\r\n}\r\n\r\nexport interface ShooterObservation extends GameObservation {\r\n\tx: number;\r\n\ty: number;\r\n\tangle: number;\r\n\tcooldown: number; // seconds left\r\n\thealth: number;\r\n\r\n\t// Sensors are 0 or 1 (indicating presence)\r\n\tenemySensors: Array < number > ;\r\n\tbulletSensors: Array < number > ;\r\n\tobstacleSensors: Array < number > ;\r\n}\r\n\r\n\r\nexport interface ShooterAction extends GameAction {\r\n  fireBullet: boolean;\r\n  // If both are specified (or none) then don't turn\r\n  turnLeft: boolean;\r\n  turnRight: boolean;\r\n  moveForward: boolean;\r\n}\r\n","import React from 'react';\r\nimport {Ellipse, Circle, Rect, Group} from 'react-konva';\r\nimport {GameOptions} from '../shared/shooter_interfaces';\r\nimport config from '../config.json';\r\nconst {shooter} = config;\r\n\r\nexport default class Bullet extends React.Component {\r\n\r\n\trender() {\r\n\t\tlet b = this.props.data;\r\n\t\treturn (\t\t\t\r\n\t\t\t<Group\r\n\t\t\t\trotation={b.angle + 90}\r\n\t\t\t\tx={b.x}\r\n\t\t\t\ty={b.y}\r\n\t\t\t>\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tradius={GameOptions.playerRadius}\r\n\t\t\t\t\tfill={shooter.colour}\r\n\t\t\t\t\trotation={b.angle}\r\n\t\t\t\t/>\t\t\r\n\t\t\t\t<Rect\r\n\t\t\t\t\tid='gun'\r\n\t\t\t\t\tx={-0.5 * shooter.gunWidth}\r\n\t\t\t\t\ty={-Math.sqrt(2) * GameOptions.playerRadius - shooter.gunLength}\r\n\t\t\t\t\twidth={shooter.gunWidth}\r\n\t\t\t\t\theight={shooter.gunLength}\r\n\t\t\t\t\tfill={shooter.gunColour}\r\n\t\t\t\t/>\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tid='left-hand'\r\n\t\t\t\t\t//x={-GameOptions.playerRadius / (Math.sqrt(2))}\r\n\t\t\t\t\t//y={-GameOptions.playerRadius / (Math.sqrt(2))}\r\n\t\t\t\t\ty={-GameOptions.playerRadius}\r\n\t\t\t\t\tradius={5}\r\n\t\t\t\t\tfill='white'\r\n\t\t\t\t\trotation={b.angle}\r\n\t\t\t\t/>\r\n\t\t\t\t<Ellipse\r\n\t\t\t\t\tid='right-hand'\r\n\t\t\t\t\twidth={shooter.handRadius * 2}\r\n\t\t\t\t\theight={shooter.handRadius * 2}\r\n\t\t\t\t\tx={shooter.gunWidth}\r\n\t\t\t\t\ty={-2 * GameOptions.playerRadius}\r\n\t\t\t\t\t//height={GameOptions.playerRadius}\r\n\t\t\t\t\t//x={Math.sqrt((GameOptions.playerRadius ** 2) / 8)}\r\n\t\t\t\t\t//y={-3 * Math.sqrt((GameOptions.playerRadius ** 2) / 8)}\r\n\t\t\t\t\t//rotation={-45}\r\n\t\t\t\t\tfill={shooter.handColour}\r\n\t\t\t\t/>\r\n\t\t\t</Group>\r\n\t\t)\r\n\t}\r\n}","import React from 'react';\r\nimport {Circle, Group} from 'react-konva';\r\n\r\nimport {GameOptions} from '../shared/shooter_interfaces';\r\nimport config from '../config.json';\r\nconst {bullet} = config;\r\n\r\nexport default class Bullet extends React.Component {\r\n\r\n\trender() {\r\n\t\tlet b = this.props.data;\r\n\t\treturn (\r\n\t\t\t<Group\r\n\t\t\t\trotation={b.angle}\r\n\t\t\t\tx={b.x}\r\n\t\t\t\ty={b.y}\r\n\t\t\t>\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tradius={GameOptions.bulletRadius}\r\n\t\t\t\t\tfill={bullet.colour}\r\n\t\t\t\t/>\r\n\t\t\t</Group>\r\n\t\t)\r\n\t}\r\n}","export function randBetween(min: number, max: number): number {\r\n\tlet multiplier = Math.random();\r\n\treturn Math.floor(multiplier * (max - min + 1) + min);\r\n}","import React from 'react';\r\nimport {Circle, Group} from 'react-konva';\r\n\r\nimport {randBetween} from '../utils/random';\r\nimport {parseHex, parseRGB} from '../utils/colours'\r\n\r\nimport {GameOptions} from '../shared/shooter_interfaces.ts';\r\nimport config from '../config.json';\r\nconst {tree} = config;\r\n\r\nexport default class Tree extends React.Component {\r\n\r\n\trender() {\r\n\t\tlet b = {\r\n\t\t\tx: randBetween(0, GameOptions.gameWidth),\r\n\t\t\ty: randBetween(0, GameOptions.gameHeight)\r\n\t\t};\r\n\t\tlet trees = [];\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\tlet base_x = i & 1;\r\n\t\t\tlet base_y = i & 2;\r\n\t\t\ttrees.push(\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tkey={['tree', b.x, b.y, i].join('.')}\r\n\t\t\t\t\tx={((base_x ? 1 : -1) * GameOptions.treeRadius) + randBetween(-20, 20, this.props.rand)}\r\n\t\t\t\t\ty={((base_y ? 1 : -1) * GameOptions.treeRadius) + randBetween(-20, 20, this.props.rand)}\r\n\t\t\t\t\tradius={randBetween(GameOptions.treeRadius * 2, GameOptions.treeRadius * 3, this.props.rand)}\r\n\t\t\t\t\tfill={parseHex(parseRGB(tree.colour).map(value => value += randBetween(-30, 30, this.props.rand)))}\r\n\t\t\t\t\topacity={0.6}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<Group\r\n\t\t\t\trotation={randBetween(0, 360, this.props.rand)}\r\n\t\t\t\tx={b.x}\r\n\t\t\t\ty={b.y}\r\n\t\t\t>\r\n\t\t\t\t{trees}\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tradius={GameOptions.treeRadius + 5}\r\n\t\t\t\t\tfill='black'\r\n\t\t\t\t\topacity={0.6}\r\n\t\t\t\t/>\r\n\t\t\t\t<Circle\r\n\t\t\t\t\tkey={['tree', b.x, b.y, 'trunk'].join('.')}\r\n\t\t\t\t\tid={['tree', b.x, b.y, 'trunk'].join('.')}\r\n\t\t\t\t\tradius={GameOptions.treeRadius}\r\n\t\t\t\t\tfill={tree.trunkColour}\r\n\t\t\t\t\topacity={0.8}\r\n\t\t\t\t/>\t\t\t\r\n\t\t\t</Group>\r\n\t\t)\r\n\t}\r\n}","export function parseRGB(hex: string): Array<number> {\r\n\tif (hex.startsWith('#')) hex = hex.slice(1);\r\n\tif (hex.length !== 6) return [0, 0, 0];\r\n\tlet r = hex.slice(0, 2);\r\n\tlet g = hex.slice(2, 4);\r\n\tlet b = hex.slice(4, 6);\r\n\treturn [r, g, b].map(v => parseInt(v, 16));\r\n}\r\n\r\nexport function parseHex(rgb: Array<number>): string {\r\n\tlet hex = '#' + rgb.map((number: number) => {\r\n\t\tlet letter = number.toString(16);\r\n\t\treturn '0'.repeat(2 - letter.length) + letter;\r\n\t}).join('');\r\n\treturn hex;\r\n}","import React from 'react';\r\nimport {Rect, Group} from 'react-konva';\r\n\r\nimport config from '../config.json';\r\n\r\nexport default class Grid extends React.Component {\r\n\r\n\trender() {\r\n\t\tconst {height, width, freq} = this.props;\r\n\t\tlet pixels = Math.ceil(width / freq);\r\n\t\tlet horizontals = [];\r\n\t\tlet verticals = [];\r\n\t\tfor (let i = 0; i < freq; i++) {\r\n\t\t\thorizontals.push(<Rect\r\n\t\t\t\tkey={['grid', 'horizontal', i].join('.')}\r\n\t\t\t\tx={pixels * i}\r\n\t\t\t\twidth={2}\r\n\t\t\t\theight={height}\r\n\t\t\t\tfill='black'\r\n\t\t\t\topacity={config.grid.transparency}\r\n\t\t\t/>)\r\n\t\t}\r\n\t\tfor (let i = 0; i < Math.ceil(height / pixels); i++) {\r\n\t\t\tverticals.push(<Rect\r\n\t\t\t\tkey={['grid', 'vertical', i].join('.')}\r\n\t\t\t\ty={pixels * i}\r\n\t\t\t\theight={1}\r\n\t\t\t\twidth={width}\r\n\t\t\t\tfill='black'\r\n\t\t\t\topacity={config.grid.transparency}\r\n\t\t\t/>)\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<Group>\r\n\t\t\t\t{verticals}\r\n\t\t\t\t{horizontals}\r\n\t\t\t</Group>\r\n\t\t)\r\n\t}\r\n}","import React from 'react';\r\nimport { Stage, Layer, Rect, Text } from 'react-konva';\r\n\r\nimport Shooter from './Objects/Shooter';\r\nimport Bullet from './Objects/Bullet';\r\nimport Tree from './Objects/Tree';\r\nimport Grid from './Objects/Grid';\r\n\r\nimport {randBetween} from './utils/random';\r\n\r\nimport config from './config.json';\r\nimport defaults from './defaults.json';\r\n\r\nimport {GameOptions} from './shared/shooter_interfaces';\r\n\r\nconst {background} = config;\r\n\r\nexport default class Canvas extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.checkSize = this.checkSize.bind(this);\r\n\t\tthis.updateState = this.updateState.bind(this);\r\n\t\tdefaults.surface.width = window.innerWidth;\r\n\t\tdefaults.surface.height = window.innerHeight;\r\n\t\tthis.state = implement(defaults);\r\n\t\tthis.state.rand = Math.random();\r\n\t\t/*setInterval(() => this.updateState({\r\n\t\t\tplayers: implement(defaults.players),\r\n\t\t\tbullets: implement(defaults.bullets)\r\n\t\t}), 1000 / config.frameRate);*/\r\n\t}\r\n\r\n\tsetEnv(props) {\r\n\r\n\t}\r\n\r\n\tupdateState(ShooterState) {\r\n\t\tlet state = Object.assign(this.state, ShooterState);\r\n\t\tlet [scale, minX, minY] = this.getScale(state);\r\n\t\tstate = Object.assign(state, { scale, minX, minY });\r\n\t\tthis.setState(state);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.checkSize();\r\n\t\twindow.addEventListener('resize', this.checkSize);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\twindow.removeEventListener('resize', this.checkSize);\r\n\t}\r\n\r\n\tcheckSize() {\r\n\t\tlet state = this.state;\r\n\t\tstate.surface.width = window.innerWidth;\r\n\t\tstate.surface.height = window.innerHeight;\r\n\t\tthis.setState(state);\r\n\t}\r\n\r\n\tgetTrees() {\r\n\t\tif (this._trees) return this._trees;\r\n\t\tlet trees = [];\r\n\t\tfor (let i = 0; i < this.state.trees; i++) {\r\n\t\t\ttrees.push(<Tree\r\n\t\t\t\tkey={['tree', i].join('.')}\r\n\t\t\t/>);\r\n\t\t}\r\n\t\treturn this._trees = trees;\r\n\t}\r\n\r\n\tgetScale(state) {\r\n\t\tlet x0 = state.players[0].x; let y0 = state.players[0].y;\r\n\t\tlet x1 = state.players[1].x; let y1 = state.players[1].y;\r\n\r\n\t\tconst PADDING = 50 + GameOptions.playerRadius;\r\n\t\tlet minX = Math.min(x0, x1) - PADDING;\r\n\t\tlet minY = Math.min(y0, y1) - PADDING;\r\n\t\tlet rangeX = Math.abs(x1 - x0) + 2 * PADDING\r\n\t\tlet rangeY = Math.abs(y1 - y0) + 2 * PADDING\r\n\r\n\t\tlet scaleX = window.innerWidth / rangeX;\r\n\t\tlet scaleY = window.innerHeight / rangeY;\r\n\t\tlet scale = Math.min(Math.min(scaleX, scaleY), 2);\r\n\t\tif (isNaN(scale)) scale = 1;\r\n\r\n\t\treturn [scale, minX - 10, minY - 10];\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log(this.state);\r\n\t\treturn <Stage {...this.state.surface}\r\n\t\t\tx={-this.state.minX * this.state.scale}\r\n\t\t\ty={-this.state.minY * this.state.scale}\r\n\t\t\tscale={{ x: this.state.scale, y: this.state.scale }}\r\n\t\t>\r\n\t\t\t<Layer id='background'>\t\t\t\t\r\n\t\t\t\t<Rect\r\n\t\t\t\t\twidth={GameOptions.gameWidth}\r\n\t\t\t\t\theight={GameOptions.gameHeight}\r\n\t\t\t\t\tfill={background.colour}\r\n\t\t\t\t/>\r\n\t\t\t</Layer>\r\n\t\t\t<Layer id='grid'>\t\t\t\t\r\n\t\t\t\t<Grid\r\n\t\t\t\t\twidth={GameOptions.gameWidth}\r\n\t\t\t\t\theight={GameOptions.gameHeight}\r\n\t\t\t\t\tfreq={config.grid.freqWidth}\r\n\t\t\t\t/>\r\n\t\t\t</Layer>\r\n\t\t\t<Layer id='trees' {...this.state.layer}>\r\n\t\t\t\t{this.getTrees()}\r\n\t\t\t</Layer>\r\n\t\t\t<Layer id='bullets' {...this.state.layer}>\r\n\t\t\t\t{this.state.bullets.map((b, i) => <Bullet\r\n\t\t\t\t\tkey = {['bullet', i].join('.')}\r\n\t\t\t\t\tdata={b}\r\n\t\t\t\t/>)}\r\n\t\t\t</Layer>\r\n\t\t\t<Layer id='players' {...this.state.layer}>\t\t\t\r\n\t\t\t\t{this.state.players.map((b, i) => <Shooter\r\n\t\t\t\t\tkey={['shooter', i].join('.')}\r\n\t\t\t\t\tdata={b}\r\n\t\t\t\t/>)}\r\n\t\t\t</Layer>\r\n\t\t</Stage>\r\n\t}\r\n}\r\n\r\nfunction implement(obj) {\r\n\tif (Array.isArray(obj)) {\r\n\t\tif (!obj.every(value => typeof value === 'number')) {\r\n\t\t\tlet arr = [];\r\n\t\t\tfor (let value of obj) {\r\n\t\t\t\tif (typeof value !== 'object') arr.push(value);\r\n\t\t\t\telse arr.push(implement(value));\r\n\t\t\t}\r\n\t\t\treturn arr;\r\n\t\t}\r\n\t\telse return randBetween(obj[0], obj[1]);\r\n\t}\r\n\tlet res = {};\r\n\tfor (let [k, v] of Object.entries(obj)) {\r\n\t\tif (typeof v !== 'object') res[k] = v;\r\n\t\telse res[k] = implement(v);\r\n\t}\r\n\treturn res;\r\n}","import {Agent, } from \"./interfaces\";\r\nimport {ShooterObservation, ShooterAction, } from \"./shooter_interfaces\";\r\n\r\nexport class DumbAgent implements Agent<ShooterObservation, ShooterAction> {\r\n  act(state: ShooterObservation): ShooterAction {\r\n    return {\r\n      fireBullet: true,\r\n      turnLeft: false,\r\n      turnRight: false,\r\n      moveForward: true,\r\n    };\r\n  }\r\n}\r\n\r\nexport class StampedeBot implements Agent<ShooterObservation, ShooterAction> {\r\n  act(state: ShooterObservation): ShooterAction {\r\n    let isEnemyInFront = state.enemySensors[0] === 1;\r\n    return {\r\n      fireBullet: isEnemyInFront,\r\n      turnLeft: !isEnemyInFront,\r\n      turnRight: false,\r\n      moveForward: isEnemyInFront,\r\n    };\r\n  }\r\n}\r\n\r\nconst KEY_LEFT = 37;\r\nconst KEY_RIGHT = 39;\r\nconst KEY_MOVE = 38;\r\nconst KEY_STOP = 40;\r\nconst KEY_SHOOT = 32;\r\n\r\nexport function realPlayer(): [(event: KeyboardEvent) => void, (event: KeyboardEvent) => void, Agent<ShooterObservation, ShooterAction>] {\r\n\r\n  const action = {\r\n    turnLeft: false,\r\n    turnRight: false,\r\n    moveForward: false,\r\n    fireBullet: false\r\n  };\r\n\r\n\r\n  function keyDown(event: KeyboardEvent): void {\r\n    console.log(\"Key down\");\r\n    switch (event.keyCode) {\r\n      case KEY_LEFT:\r\n        action.turnLeft = true;\r\n        break;\r\n      case KEY_RIGHT:\r\n        action.turnRight = true;\r\n        break;\r\n      case KEY_MOVE:\r\n        action.moveForward = true;\r\n\t\tbreak;\r\n\t  case KEY_STOP:\r\n\t\taction.moveForward = false;\r\n\t\tbreak;\r\n      case KEY_SHOOT:\r\n        action.fireBullet = true;\r\n        break;\r\n    }\r\n  }\r\n\r\n  function keyUp(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case KEY_LEFT:\r\n        action.turnLeft = false;\r\n        break;\r\n      case KEY_RIGHT:\r\n        action.turnRight = false;\r\n        break;\r\n\t\tcase KEY_MOVE:\r\n\t\t  action.moveForward = false;\r\n\t\t  break;\r\n\t\tcase KEY_SHOOT:\r\n\t\t  action.fireBullet = false;\r\n\t\t  break;\r\n    }\r\n\t}\r\n\r\n  return [keyUp, keyDown, { act: _ => action }];\r\n}\r\n\r\nexport class RealPlayer implements Agent<ShooterObservation, ShooterAction> {\r\n  private rotate_left: boolean;\r\n  private rotate_right: boolean;\r\n  private move: boolean;\r\n  private shoot: boolean;\r\n\r\n  constructor() {\r\n    this.rotate_left = false;\r\n    this.rotate_right = false;\r\n    this.move = true;\r\n    this.shoot = false;\r\n  }\r\n\r\n  keyDown(event: KeyboardEvent): void {\r\n    console.log(\"Key down\");\r\n    switch (event.keyCode) {\r\n      case KEY_LEFT:\r\n        this.rotate_left = true;\r\n        break;\r\n      case KEY_RIGHT:\r\n        this.rotate_right = true;\r\n        break;\r\n      case KEY_MOVE:\r\n        this.move = true;\r\n        break;\r\n\t\tcase KEY_STOP:\r\n\t\t  this.move = false;\r\n\t\t  break;\r\n      case KEY_SHOOT:\r\n        this.shoot = true;\r\n        break;\r\n    }\r\n  }\r\n\r\n  keyUp(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case KEY_LEFT:\r\n        this.rotate_left = false;\r\n        break;\r\n      case KEY_RIGHT:\r\n        this.rotate_right = false;\r\n        break;\r\n\t\tcase KEY_MOVE:\r\n\t\t  this.move = false;\r\n\t\t  break;\r\n\t\tcase KEY_SHOOT:\r\n\t\t  this.shoot = false;\r\n\t\t  break;\r\n    }\r\n\t}\r\n\r\n  act(state: ShooterObservation): ShooterAction {\r\n    return {\r\n      fireBullet: this.shoot,\r\n      turnLeft: this.rotate_left,\r\n      turnRight: this.rotate_right,\r\n      moveForward: this.move,\r\n    };\r\n  }\r\n}\r\n","import { Game, StateUpdate } from \"./interfaces\"\r\nimport { ShooterAction, ShooterState, ShooterObservation, GameOptions, Player, Bullet, Obstacle, ObstacleShape, } from \"./shooter_interfaces\";\r\n\r\nimport {randBetween} from '../utils/random';\r\n\r\nconst delta = 1 / GameOptions.fps;\r\n\r\nexport const ShooterGame: Game<ShooterState, ShooterAction, ShooterObservation> = {\r\n\r\n  createState(seed: number): ShooterState {\r\n\r\n    const players = [\r\n\t\t{\r\n\t\t\t\"x\": [200, 3800],\r\n\t\t\t\"y\": [100, 1900],\r\n\t\t\t\"angle\": [0, 360]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"x\": [200, 3800],\r\n\t\t\t\"y\": [100, 1900],\r\n\t\t\t\"angle\": [0, 360]\r\n\t\t}\r\n    ];\r\n\r\n    //it's possible to do something more intelligent here after adding obstacles\r\n    let player1 = {\r\n      x: randBetween(GameOptions.playerRadius, GameOptions.gameWidth - GameOptions.playerRadius),\r\n      y: randBetween(GameOptions.playerRadius, GameOptions.gameHeight - GameOptions.playerRadius),\r\n      angle: 45,\r\n      cooldown: 0,\r\n      health: 1,\r\n    };\r\n    let player2 = {\r\n\t\tx: randBetween(GameOptions.playerRadius, GameOptions.gameWidth - GameOptions.playerRadius),\r\n\t\ty: randBetween(GameOptions.playerRadius, GameOptions.gameHeight - GameOptions.playerRadius),\r\n      angle: 225,\r\n      cooldown: 0,\r\n      health: 1,\r\n    };\r\n\r\n    let tree = {\r\n      x: GameOptions.gameWidth / 3,\r\n      y: GameOptions.gameHeight / 3,\r\n      shape: ObstacleShape.Circle,\r\n      size: GameOptions.treeRadius,\r\n    }\r\n\r\n    let rock = {\r\n      x: 2 * GameOptions.gameWidth / 3,\r\n      y: 2 * GameOptions.gameHeight / 3,\r\n      shape: ObstacleShape.Square,\r\n      size: GameOptions.treeRadius,\r\n    }\r\n\r\n    return {\r\n      players: [player1, player2],\r\n      bullets: [],\r\n      obstacles: [tree, rock],\r\n    };\r\n  },\r\n\r\n  updateState(state: ShooterState, actions: ShooterAction[]): StateUpdate<ShooterState> {\r\n    const n = state.players.length;\r\n\r\n    const newBullets = [];\r\n    const newPlayers = [];\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      const player = state.players[i];\r\n      const action = actions[i];\r\n\r\n      let cooldown = player.cooldown;\r\n      let angle = player.angle;\r\n\r\n      if (action.fireBullet && player.cooldown < 0.01) {\r\n        newBullets.push({sourceAgent: i, x: player.x, y: player.y, angle: player.angle});\r\n        cooldown = GameOptions.bulletCooldown;\r\n      } else {\r\n        cooldown = Math.max(0, cooldown - delta);\r\n      }\r\n\r\n      if (action.turnLeft) angle -= (GameOptions.playerTurnSpeed * delta) % 360;\r\n      if (action.turnRight) angle += (GameOptions.playerTurnSpeed * delta) % 360;\r\n\r\n      let newPlayer = {\r\n        ...player,\r\n        cooldown,\r\n        angle\r\n      };\r\n      if (action.moveForward) {\r\n        newPlayer = moveObject(newPlayer, GameOptions.playerMoveSpeed * delta, GameOptions.playerRadius, state.obstacles);\r\n      }\r\n\r\n      newPlayers.push(newPlayer);\r\n    }\r\n\r\n    const damagePerPlayer = Array(n).fill(0);\r\n\r\n    for (const bullet of state.bullets) {\r\n      let collides = false;\r\n      for (let i = 0; i < n; i++) {\r\n        const player = state.players[i];\r\n        if (detectCollision(player, bullet, i)) {\r\n          collides = true;\r\n          damagePerPlayer[i] += GameOptions.bulletDamage;\r\n          break;\r\n        }\r\n      }\r\n      if (!collides) {\r\n        let newBullet = moveObject(bullet, GameOptions.bulletSpeed * delta, 0, state.obstacles);\r\n        if (newBullet.x > 0 && newBullet.x < GameOptions.gameWidth && newBullet.y > 0 && newBullet.y < GameOptions.gameHeight){\r\n          newBullets.push(newBullet);\r\n        }\r\n      }\r\n    }\r\n\r\n    let done = false;\r\n    for (let i = 0; i < n; i++) {\r\n      newPlayers[i].health -= damagePerPlayer[i];\r\n      if (newPlayers[i].health < 0.01) {\r\n        done = true;\r\n      }\r\n    }\r\n\r\n    return {\r\n      newState: { ...state, players: newPlayers, bullets: newBullets },\r\n      isDone: done,\r\n      reward: damagePerPlayer.map(x => -x),\r\n    };\r\n  },\r\n\r\n  generateObservation(state: ShooterState, agentIdx: number): ShooterObservation {\r\n    let agent = state.players[agentIdx];\r\n    let x = agent.x;\r\n    let y = agent.y;\r\n    let angle = agent.angle;\r\n    let cooldown = agent.cooldown;\r\n\r\n    let sensorSpread = 360 / GameOptions.noSensors;\r\n\r\n    let enemySensors = [];\r\n    let bulletSensors = [];\r\n    for(let i = 0; i < GameOptions.noSensors; i++) {\r\n      let sensorAngle = (angle + i * sensorSpread) / 180 * Math.PI;\r\n      let halfsidevector: [number, number] = [Math.cos(sensorAngle + Math.PI / 2), Math.sin(sensorAngle + Math.PI / 2)];\r\n      let longsidevector: [number, number] = [Math.cos(sensorAngle), Math.sin(sensorAngle)];\r\n      let playerDetectionRectangle: Array<[number, number]> = rectangle(x, y, GameOptions.playerRadius, halfsidevector, longsidevector);\r\n      let bulletDetectionRectangle: Array<[number, number]> = rectangle(x, y, GameOptions.bulletRadius, halfsidevector, longsidevector);\r\n\r\n      let enemyDetected = 0;\r\n      let bulletDetected = 0;\r\n      let n = state.players.length;\r\n      for(let j = 0; j < n; j ++) {\r\n        if(j === agentIdx) {continue;}\r\n        if(isInside(playerDetectionRectangle, [state.players[j].x, state.players[j].y])){\r\n          enemyDetected = 1;\r\n          break;\r\n        }\r\n      }\r\n      for(var bullet of state.bullets) {\r\n        if(bullet.sourceAgent != agentIdx && isInside(bulletDetectionRectangle, [bullet.x, bullet.y])) {\r\n          bulletDetected = 1;\r\n          break;\r\n        }\r\n      }\r\n      enemySensors.push(enemyDetected);\r\n      bulletSensors.push(bulletDetected);\r\n    }\r\n    return {\r\n      x: x,\r\n      y: y,\r\n      angle: angle,\r\n      cooldown: cooldown, // seconds left\r\n      health: agent.health,\r\n\r\n      // Sensors are 0 or 1 (indicating presence)\r\n      enemySensors: enemySensors,\r\n      bulletSensors: bulletSensors,\r\n      obstacleSensors: [], //TODO\r\n    };\r\n  },\r\n\r\n  observationSize: 5 + 3 * GameOptions.noSensors,\r\n  getData(observation: ShooterObservation): number[] {\r\n    return [\r\n      observation.x,\r\n      observation.y,\r\n      observation.angle,\r\n      observation.cooldown,\r\n      observation.health,\r\n      ...observation.obstacleSensors,\r\n      ...observation.enemySensors,\r\n      ...observation.bulletSensors,\r\n    ];\r\n  },\r\n\r\n  actionSize: 4,\r\n  getAction(data: number[]): ShooterAction {\r\n    return {\r\n      fireBullet: data[0] > 0.5,\r\n      turnLeft: data[1] > 0.5,\r\n      turnRight: data[2] > 0.5,\r\n      moveForward: data[3] > 0.5,\r\n    }\r\n  }\r\n}\r\n\r\nfunction detectCollision(player: Player, bullet: Bullet, player_id: number) {\r\n  return Math.hypot(player.x - bullet.x, player.y - bullet.y, 2) < (GameOptions.playerRadius + GameOptions.bulletRadius)\r\n    && bullet.sourceAgent != player_id;\r\n}\r\n\r\nfunction moveObject<T extends { x: number, y: number, angle: number }>(object: T, speed: number, radius: number, obstacles: Array<Obstacle>): T {\r\n  let radians = object.angle / 180 * Math.PI;\r\n  let x = object.x + Math.cos(radians) * speed;\r\n  let y = object.y + Math.sin(radians) * speed;\r\n  if (x > GameOptions.gameWidth - radius) {\r\n    x = GameOptions.gameWidth - radius;\r\n  }\r\n  else if (x < radius) {\r\n    x = radius;\r\n  }\r\n  if (y > GameOptions.gameHeight - radius) {\r\n    y = GameOptions.gameHeight - radius;\r\n  }\r\n  else if (y < radius) {\r\n    y = radius;\r\n  }\r\n\r\n  for(let obstacle of obstacles) {\r\n    switch(obstacle.shape) {\r\n      case ObstacleShape.Circle:\r\n        while(radius + obstacle.size > Math.hypot(x - obstacle.x, y - obstacle.y) + 0.01){\r\n          x = 0.5 * (obstacle.x + x);\r\n          y = 0.5 * (obstacle.y + y);\r\n        }\r\n        break;\r\n      case ObstacleShape.Square:\r\n        //TODO it does the same what circle\r\n        while(radius + obstacle.size > Math.hypot(x - obstacle.x, y - obstacle.y) + 0.01){\r\n          x = 0.5 * (obstacle.x + x);\r\n          y = 0.5 * (obstacle.y + y);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n  return {\r\n    ...object,\r\n    x: x,\r\n    y: y,\r\n  };\r\n}\r\n\r\n//https://math.stackexchange.com/questions/190111/how-to-check-if-a-point-is-inside-a-rectangle\r\nfunction isInside(rectangle: Array<[number, number]>, point: [number, number]) {\r\n  let AM = [point[0] - rectangle[0][0], point[1] - rectangle[0][1]];\r\n  let AB = [rectangle[1][0] - rectangle[0][0], rectangle[1][1] - rectangle[0][1]];\r\n  let AD = [rectangle[3][0] - rectangle[0][0], rectangle[3][1] - rectangle[0][1]];\r\n  let AMdotAB = dot(AM, AB);\r\n  let AB2 = dot(AB, AB);\r\n  let AMdotAD = dot(AM, AD);\r\n  let AD2 = dot(AD, AD);\r\n  return (0 < AMdotAB && AMdotAB < AB2 && 0 < AMdotAD && AMdotAD < AD2);\r\n}\r\n\r\nfunction rectangle(x: number, y: number, radius: number, shortvector: [number, number], longvector: [number, number]): Array<[number, number]> {\r\n  let halfsidevector = [shortvector[0] * radius, shortvector[1] * radius];\r\n  let longsidevector = [longvector[0] * (radius+GameOptions.sensorRadius), longvector[1] *(radius+GameOptions.sensorRadius)]\r\n  let a: [number, number] = [x + halfsidevector[0], y + halfsidevector[1]];\r\n  let b: [number, number] = [x - halfsidevector[0], y - halfsidevector[1]];\r\n  let c: [number, number] = [b[0] + longsidevector[0], b[1] + longsidevector[1]];\r\n  let d: [number, number] = [a[0] + longsidevector[0], a[1] + longsidevector[1]];\r\n  return [a, b, c, d];\r\n}\r\n\r\nfunction dot(xs: Array<number>, ys: Array<number>) {\r\n  let result = 0;\r\n  let xn = xs.length;\r\n  let yn = ys.length;\r\n  for(let i = 0; i < xn && i < yn; i++) {\r\n    result += xs[i] * ys[i];\r\n  }\r\n  return result;\r\n}\r\n","import React from 'react';\r\nimport Canvas from './Canvas';\r\nimport './App.css';\r\nimport { DumbAgent, StampedeBot, realPlayer } from './shared/dumb_bot';\r\nimport { gameLoop } from './shared/gameLoop';\r\nimport { GameOptions } from './shared/shooter_interfaces';\r\nimport { ShooterGame } from './shared/shooter_imp';\r\n\r\nclass App extends React.Component {\r\n\r\n\t// private playerAgent = new RealPlayer()\r\n\tprivate player = realPlayer();\r\n\r\n\tcomponentDidMount(){\r\n\t\tdocument.addEventListener(\"keydown\", this.player[1]);\r\n\t\tdocument.addEventListener(\"keyup\", this.player[0]);\r\n\t}\r\n\t\r\n\tcomponentWillUnmount(){\r\n\t\tdocument.removeEventListener(\"keydown\", this.player[1]);\r\n\t\tdocument.removeEventListener(\"keyup\", this.player[0]);\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet ref = React.createRef<Canvas>();\r\n\r\n\t\t// let agent1 = this.playerAgent;\r\n\t\tlet agent1 = this.player[2];\r\n\t\tlet agent2 = new StampedeBot();\r\n\r\n\t\tgameLoop(ShooterGame, [agent1, agent2],\r\n\t\t\t{ render: state => ref.current && ref.current.updateState(state) },\r\n\t\t\tGameOptions.fps\r\n\t\t)\r\n\r\n\t\treturn <div\r\n\t\t\t\tclassName=\"App\"\r\n\t\t\t\tid='container'\r\n\t\t\t\tref='container'\r\n\t\t\t>\r\n\t\t\t{ <Canvas ref={ref} /> }\r\n\t\t</div>;\r\n\t}\r\n}\r\n\r\nexport default App;","import { Game, GameState, GameAction, GameObservation, Renderer, Agent } from \"./interfaces\";\r\n\r\nexport function gameLoop<\r\n  State extends GameState, Action extends GameAction, Observation extends GameObservation>(game: Game<State, Action, Observation>, agents: Agent<Observation, Action>[], renderer: Renderer<GameState>, fps: number) {\r\n  let state = game.createState(0);\r\n\r\n  function innerLoop() {\r\n    const actions = agents.map((agent, idx) => {\r\n      const obs = game.generateObservation(state, idx)\r\n      return agent.act(obs)\r\n    });\r\n    const { newState, isDone } = game.updateState(state, actions);\r\n    state = newState;\r\n\r\n    if (isDone) {\r\n      console.log(\"Game finished. Restarting...\");\r\n      state = game.createState(0);\r\n    }\r\n\r\n    renderer.render(state);\r\n  }\r\n\r\n  setInterval(innerLoop, 1000 / fps);\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.tsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}